
prova_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000295c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b80  08002b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b88  08002b88  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b88  08002b88  00012b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b8c  08002b8c  00012b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002b90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002bec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002bec  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076d3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000157c  00000000  00000000  000277a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000688  00000000  00000000  00028d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004f6  00000000  00000000  000293a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013a0a  00000000  00000000  0002989e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bd1  00000000  00000000  0003d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076cd1  00000000  00000000  00045e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e8c  00000000  00000000  000bcb4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000be9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002b14 	.word	0x08002b14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002b14 	.word	0x08002b14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fa35 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f81d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8b1 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ce:	f000 f885 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char string[64];
  snprintf(string, sizeof(string), "Ciao %d", 5);
 80005d2:	4638      	mov	r0, r7
 80005d4:	2305      	movs	r3, #5
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <main+0x40>)
 80005d8:	2140      	movs	r1, #64	; 0x40
 80005da:	f001 fde3 	bl	80021a4 <sniprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_Transmit(&huart2, string, strlen(string), 50);
 80005de:	463b      	mov	r3, r7
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fe15 	bl	8000210 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	b29a      	uxth	r2, r3
 80005ea:	4639      	mov	r1, r7
 80005ec:	2332      	movs	r3, #50	; 0x32
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x44>)
 80005f0:	f001 fa1c 	bl	8001a2c <HAL_UART_Transmit>
	  HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 fa8d 	bl	8000b14 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, string, strlen(string), 50);
 80005fa:	e7f0      	b.n	80005de <main+0x22>
 80005fc:	08002b2c 	.word	0x08002b2c
 8000600:	20000078 	.word	0x20000078

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2234      	movs	r2, #52	; 0x34
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fdfa 	bl	800220c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <SystemClock_Config+0xd0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xd4>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800067e:	2304      	movs	r3, #4
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fef8 	bl	8001484 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069a:	f000 f8b7 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fcc2 	bl	8001044 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c6:	f000 f8a1 	bl	800080c <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 f93a 	bl	800198c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f875 	bl	800080c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000078 	.word	0x20000078
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <MX_GPIO_Init+0xd0>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a17      	ldr	r2, [pc, #92]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	4812      	ldr	r0, [pc, #72]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007bc:	f000 fc28 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007d8:	f000 faa6 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007dc:	2320      	movs	r3, #32
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007f4:	f000 fa98 	bl	8000d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020800 	.word	0x40020800

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000856:	2007      	movs	r0, #7
 8000858:	f000 fa32 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a19      	ldr	r2, [pc, #100]	; (80008ec <HAL_UART_MspInit+0x84>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d12b      	bne.n	80008e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a17      	ldr	r2, [pc, #92]	; (80008f0 <HAL_UART_MspInit+0x88>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_UART_MspInit+0x88>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <HAL_UART_MspInit+0x88>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d2:	2307      	movs	r3, #7
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_UART_MspInit+0x8c>)
 80008de:	f000 fa23 	bl	8000d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40004400 	.word	0x40004400
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	e7fe      	b.n	80008fc <NMI_Handler+0x4>

080008fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <MemManage_Handler+0x4>

0800090a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <BusFault_Handler+0x4>

08000910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <UsageFault_Handler+0x4>

08000916 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8c6 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	; (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f001 fc4e 	bl	800221c <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	; (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20008000 	.word	0x20008000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	200000c0 	.word	0x200000c0
 80009b4:	20000210 	.word	0x20000210

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f001 fc0d 	bl	8002228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fdd5 	bl	80005bc <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a14:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a20:	08002b90 	.word	0x08002b90
  ldr r2, =_sbss
 8000a24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a28:	20000210 	.word	0x20000210

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f931 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fed8 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f93b 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f911 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200000c4 	.word	0x200000c4

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000c4 	.word	0x200000c4

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	; (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	; (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	; 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff47 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5c 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb0 	bl	8000c7c <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e14d      	b.n	8000fe0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 813c 	bne.w	8000fda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 8096 	beq.w	8000fda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a43      	ldr	r2, [pc, #268]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1ea>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_GPIO_Init+0x2dc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1e6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <HAL_GPIO_Init+0x2e0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1e2>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aeae 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0cc      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d90c      	bls.n	8001080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	494d      	ldr	r1, [pc, #308]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d044      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d119      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e07f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e067      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fce2 	bl	8000afc <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fcde 	bl	8000afc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e04f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d20c      	bcs.n	800118c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e032      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4916      	ldr	r1, [pc, #88]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ca:	f000 f821 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc42 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	08002b34 	.word	0x08002b34
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001214:	b094      	sub	sp, #80	; 0x50
 8001216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
 800121c:	2300      	movs	r3, #0
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001220:	2300      	movs	r3, #0
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001228:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d00d      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x40>
 8001234:	2b08      	cmp	r3, #8
 8001236:	f200 80e1 	bhi.w	80013fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x34>
 800123e:	2b04      	cmp	r3, #4
 8001240:	d003      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x3a>
 8001242:	e0db      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_GetSysClockFreq+0x204>)
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001248:	e0db      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_GetSysClockFreq+0x208>)
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800124e:	e0d8      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	2200      	movs	r2, #0
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
 800127e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001282:	4622      	mov	r2, r4
 8001284:	462b      	mov	r3, r5
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	0159      	lsls	r1, r3, #5
 8001290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001294:	0150      	lsls	r0, r2, #5
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4621      	mov	r1, r4
 800129c:	1a51      	subs	r1, r2, r1
 800129e:	6139      	str	r1, [r7, #16]
 80012a0:	4629      	mov	r1, r5
 80012a2:	eb63 0301 	sbc.w	r3, r3, r1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012b4:	4659      	mov	r1, fp
 80012b6:	018b      	lsls	r3, r1, #6
 80012b8:	4651      	mov	r1, sl
 80012ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012be:	4651      	mov	r1, sl
 80012c0:	018a      	lsls	r2, r1, #6
 80012c2:	4651      	mov	r1, sl
 80012c4:	ebb2 0801 	subs.w	r8, r2, r1
 80012c8:	4659      	mov	r1, fp
 80012ca:	eb63 0901 	sbc.w	r9, r3, r1
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	eb18 0303 	adds.w	r3, r8, r3
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	462b      	mov	r3, r5
 80012f0:	eb49 0303 	adc.w	r3, r9, r3
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001302:	4629      	mov	r1, r5
 8001304:	024b      	lsls	r3, r1, #9
 8001306:	4621      	mov	r1, r4
 8001308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800130c:	4621      	mov	r1, r4
 800130e:	024a      	lsls	r2, r1, #9
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	2200      	movs	r2, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
 800131a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800131c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001320:	f7fe ffce 	bl	80002c0 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4613      	mov	r3, r2
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132c:	e058      	b.n	80013e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	2200      	movs	r2, #0
 8001336:	4618      	mov	r0, r3
 8001338:	4611      	mov	r1, r2
 800133a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001348:	4642      	mov	r2, r8
 800134a:	464b      	mov	r3, r9
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	f04f 0100 	mov.w	r1, #0
 8001354:	0159      	lsls	r1, r3, #5
 8001356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800135a:	0150      	lsls	r0, r2, #5
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4641      	mov	r1, r8
 8001362:	ebb2 0a01 	subs.w	sl, r2, r1
 8001366:	4649      	mov	r1, r9
 8001368:	eb63 0b01 	sbc.w	fp, r3, r1
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800137c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001380:	ebb2 040a 	subs.w	r4, r2, sl
 8001384:	eb63 050b 	sbc.w	r5, r3, fp
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	00eb      	lsls	r3, r5, #3
 8001392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001396:	00e2      	lsls	r2, r4, #3
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	4643      	mov	r3, r8
 800139e:	18e3      	adds	r3, r4, r3
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	464b      	mov	r3, r9
 80013a4:	eb45 0303 	adc.w	r3, r5, r3
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013b6:	4629      	mov	r1, r5
 80013b8:	028b      	lsls	r3, r1, #10
 80013ba:	4621      	mov	r1, r4
 80013bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013c0:	4621      	mov	r1, r4
 80013c2:	028a      	lsls	r2, r1, #10
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	2200      	movs	r2, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	61fa      	str	r2, [r7, #28]
 80013d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d4:	f7fe ff74 	bl	80002c0 <__aeabi_uldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4613      	mov	r3, r2
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	3301      	adds	r3, #1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80013f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80013fa:	e002      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetSysClockFreq+0x204>)
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001404:	4618      	mov	r0, r3
 8001406:	3750      	adds	r7, #80	; 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	00f42400 	.word	0x00f42400
 8001418:	007a1200 	.word	0x007a1200

0800141c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_RCC_GetHCLKFreq+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff0 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800143c:	4602      	mov	r2, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4903      	ldr	r1, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5ccb      	ldrb	r3, [r1, r3]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	08002b44 	.word	0x08002b44

0800145c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001460:	f7ff ffdc 	bl	800141c <HAL_RCC_GetHCLKFreq>
 8001464:	4602      	mov	r2, r0
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	0b5b      	lsrs	r3, r3, #13
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	4903      	ldr	r1, [pc, #12]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001472:	5ccb      	ldrb	r3, [r1, r3]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001478:	4618      	mov	r0, r3
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	08002b44 	.word	0x08002b44

08001484 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e273      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d075      	beq.n	800158e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014a2:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d00c      	beq.n	80014c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ae:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d112      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4b82      	ldr	r3, [pc, #520]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d05b      	beq.n	800158c <HAL_RCC_OscConfig+0x108>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d157      	bne.n	800158c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e24e      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x74>
 80014ea:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a75      	ldr	r2, [pc, #468]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x98>
 8001502:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6f      	ldr	r2, [pc, #444]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6d      	ldr	r3, [pc, #436]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6c      	ldr	r2, [pc, #432]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xb0>
 800151c:	4b69      	ldr	r3, [pc, #420]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b66      	ldr	r3, [pc, #408]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a65      	ldr	r2, [pc, #404]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fade 	bl	8000afc <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fada 	bl	8000afc <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e213      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xc0>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff faca 	bl	8000afc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fac6 	bl	8000afc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1ff      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0xe8>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800159a:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015a6:	4b47      	ldr	r3, [pc, #284]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1d3      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3b      	ldr	r3, [pc, #236]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4937      	ldr	r1, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fa7f 	bl	8000afc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fa7b 	bl	8000afc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1b4      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4925      	ldr	r1, [pc, #148]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x244>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fa5e 	bl	8000afc <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fa5a 	bl	8000afc <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e193      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d036      	beq.n	80016dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d016      	beq.n	80016a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167c:	f7ff fa3e 	bl	8000afc <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff fa3a 	bl	8000afc <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e173      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_RCC_OscConfig+0x240>)
 8001698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x200>
 80016a2:	e01b      	b.n	80016dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_RCC_OscConfig+0x248>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016aa:	f7ff fa27 	bl	8000afc <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b0:	e00e      	b.n	80016d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff fa23 	bl	8000afc <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d907      	bls.n	80016d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e15c      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	42470000 	.word	0x42470000
 80016cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ea      	bne.n	80016b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8097 	beq.w	8001818 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b83      	ldr	r3, [pc, #524]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a7e      	ldr	r2, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b7c      	ldr	r3, [pc, #496]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b79      	ldr	r3, [pc, #484]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d118      	bne.n	8001758 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b76      	ldr	r3, [pc, #472]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a75      	ldr	r2, [pc, #468]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff f9e3 	bl	8000afc <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173a:	f7ff f9df 	bl	8000afc <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e118      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <HAL_RCC_OscConfig+0x47c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x2ea>
 8001760:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a65      	ldr	r2, [pc, #404]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	e01c      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b05      	cmp	r3, #5
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x30c>
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a60      	ldr	r2, [pc, #384]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0x324>
 8001790:	4b5a      	ldr	r3, [pc, #360]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001794:	4a59      	ldr	r2, [pc, #356]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001796:	f023 0301 	bic.w	r3, r3, #1
 800179a:	6713      	str	r3, [r2, #112]	; 0x70
 800179c:	4b57      	ldr	r3, [pc, #348]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a56      	ldr	r2, [pc, #344]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d015      	beq.n	80017dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff f9a4 	bl	8000afc <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff f9a0 	bl	8000afc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e0d7      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	4b4b      	ldr	r3, [pc, #300]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0ee      	beq.n	80017b8 <HAL_RCC_OscConfig+0x334>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff f98e 	bl	8000afc <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff f98a 	bl	8000afc <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e0c1      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1ee      	bne.n	80017e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001806:	7dfb      	ldrb	r3, [r7, #23]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180c:	4b3b      	ldr	r3, [pc, #236]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ad 	beq.w	800197c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b08      	cmp	r3, #8
 800182c:	d060      	beq.n	80018f0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d145      	bne.n	80018c2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f95e 	bl	8000afc <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff f95a 	bl	8000afc <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e093      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	085b      	lsrs	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	041b      	lsls	r3, r3, #16
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	061b      	lsls	r3, r3, #24
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	071b      	lsls	r3, r3, #28
 800188e:	491b      	ldr	r1, [pc, #108]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 8001896:	2201      	movs	r2, #1
 8001898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189a:	f7ff f92f 	bl	8000afc <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f92b 	bl	8000afc <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e064      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x41e>
 80018c0:	e05c      	b.n	800197c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_RCC_OscConfig+0x480>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff f918 	bl	8000afc <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f914 	bl	8000afc <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e04d      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_RCC_OscConfig+0x478>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x44c>
 80018ee:	e045      	b.n	800197c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e040      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000
 8001904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_RCC_OscConfig+0x504>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d030      	beq.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d129      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d122      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001938:	4013      	ands	r3, r2
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001940:	4293      	cmp	r3, r2
 8001942:	d119      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	3b01      	subs	r3, #1
 8001952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d10f      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d107      	bne.n	8001978 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e042      	b.n	8001a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7fe ff58 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2224      	movs	r2, #36	; 0x24
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f973 	bl	8001cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d175      	bne.n	8001b38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <HAL_UART_Transmit+0x2c>
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e06e      	b.n	8001b3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2221      	movs	r2, #33	; 0x21
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff f847 	bl	8000afc <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	88fa      	ldrh	r2, [r7, #6]
 8001a74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	88fa      	ldrh	r2, [r7, #6]
 8001a7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a84:	d108      	bne.n	8001a98 <HAL_UART_Transmit+0x6c>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	61bb      	str	r3, [r7, #24]
 8001a96:	e003      	b.n	8001aa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001aa0:	e02e      	b.n	8001b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f848 	bl	8001b42 <UART_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2220      	movs	r2, #32
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03a      	b.n	8001b3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	3302      	adds	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	e007      	b.n	8001af2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	781a      	ldrb	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1cb      	bne.n	8001aa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2200      	movs	r2, #0
 8001b12:	2140      	movs	r1, #64	; 0x40
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 f814 	bl	8001b42 <UART_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e006      	b.n	8001b3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b52:	e03b      	b.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d037      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b5c:	f7fe ffce 	bl	8000afc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	6a3a      	ldr	r2, [r7, #32]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d302      	bcc.n	8001b72 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e03a      	b.n	8001bec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d023      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b80      	cmp	r3, #128	; 0x80
 8001b88:	d020      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b40      	cmp	r3, #64	; 0x40
 8001b8e:	d01d      	beq.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d116      	bne.n	8001bcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f81d 	bl	8001bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e00f      	b.n	8001bec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	bf0c      	ite	eq
 8001bdc:	2301      	moveq	r3, #1
 8001bde:	2300      	movne	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	461a      	mov	r2, r3
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d0b4      	beq.n	8001b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b095      	sub	sp, #84	; 0x54
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	330c      	adds	r3, #12
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c06:	e853 3f00 	ldrex	r3, [r3]
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	330c      	adds	r3, #12
 8001c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8001c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c24:	e841 2300 	strex	r3, r2, [r1]
 8001c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e5      	bne.n	8001bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3314      	adds	r3, #20
 8001c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	e853 3f00 	ldrex	r3, [r3]
 8001c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3314      	adds	r3, #20
 8001c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c58:	e841 2300 	strex	r3, r2, [r1]
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e5      	bne.n	8001c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d119      	bne.n	8001ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	330c      	adds	r3, #12
 8001c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	e853 3f00 	ldrex	r3, [r3]
 8001c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f023 0310 	bic.w	r3, r3, #16
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c8c:	61ba      	str	r2, [r7, #24]
 8001c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	e841 2300 	strex	r3, r2, [r1]
 8001c98:	613b      	str	r3, [r7, #16]
   return(result);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1e5      	bne.n	8001c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cae:	bf00      	nop
 8001cb0:	3754      	adds	r7, #84	; 0x54
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc0:	b0c0      	sub	sp, #256	; 0x100
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd8:	68d9      	ldr	r1, [r3, #12]
 8001cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	ea40 0301 	orr.w	r3, r0, r1
 8001ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d14:	f021 010c 	bic.w	r1, r1, #12
 8001d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d22:	430b      	orrs	r3, r1
 8001d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d36:	6999      	ldr	r1, [r3, #24]
 8001d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	ea40 0301 	orr.w	r3, r0, r1
 8001d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b8f      	ldr	r3, [pc, #572]	; (8001f88 <UART_SetConfig+0x2cc>)
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d005      	beq.n	8001d5c <UART_SetConfig+0xa0>
 8001d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <UART_SetConfig+0x2d0>)
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d104      	bne.n	8001d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d5c:	f7ff fb7e 	bl	800145c <HAL_RCC_GetPCLK2Freq>
 8001d60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001d64:	e003      	b.n	8001d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d66:	f7ff fb65 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8001d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d78:	f040 810c 	bne.w	8001f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d80:	2200      	movs	r2, #0
 8001d82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001d86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001d8e:	4622      	mov	r2, r4
 8001d90:	462b      	mov	r3, r5
 8001d92:	1891      	adds	r1, r2, r2
 8001d94:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d96:	415b      	adcs	r3, r3
 8001d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d9e:	4621      	mov	r1, r4
 8001da0:	eb12 0801 	adds.w	r8, r2, r1
 8001da4:	4629      	mov	r1, r5
 8001da6:	eb43 0901 	adc.w	r9, r3, r1
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dbe:	4690      	mov	r8, r2
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	eb18 0303 	adds.w	r3, r8, r3
 8001dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001dcc:	462b      	mov	r3, r5
 8001dce:	eb49 0303 	adc.w	r3, r9, r3
 8001dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001de2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001dea:	460b      	mov	r3, r1
 8001dec:	18db      	adds	r3, r3, r3
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
 8001df0:	4613      	mov	r3, r2
 8001df2:	eb42 0303 	adc.w	r3, r2, r3
 8001df6:	657b      	str	r3, [r7, #84]	; 0x54
 8001df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e00:	f7fe fa5e 	bl	80002c0 <__aeabi_uldivmod>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <UART_SetConfig+0x2d4>)
 8001e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	011c      	lsls	r4, r3, #4
 8001e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e16:	2200      	movs	r2, #0
 8001e18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e24:	4642      	mov	r2, r8
 8001e26:	464b      	mov	r3, r9
 8001e28:	1891      	adds	r1, r2, r2
 8001e2a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e2c:	415b      	adcs	r3, r3
 8001e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e34:	4641      	mov	r1, r8
 8001e36:	eb12 0a01 	adds.w	sl, r2, r1
 8001e3a:	4649      	mov	r1, r9
 8001e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e54:	4692      	mov	sl, r2
 8001e56:	469b      	mov	fp, r3
 8001e58:	4643      	mov	r3, r8
 8001e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8001e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e62:	464b      	mov	r3, r9
 8001e64:	eb4b 0303 	adc.w	r3, fp, r3
 8001e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e78:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001e80:	460b      	mov	r3, r1
 8001e82:	18db      	adds	r3, r3, r3
 8001e84:	643b      	str	r3, [r7, #64]	; 0x40
 8001e86:	4613      	mov	r3, r2
 8001e88:	eb42 0303 	adc.w	r3, r2, r3
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001e96:	f7fe fa13 	bl	80002c0 <__aeabi_uldivmod>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	; (8001f90 <UART_SetConfig+0x2d4>)
 8001ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	2264      	movs	r2, #100	; 0x64
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	1acb      	subs	r3, r1, r3
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <UART_SetConfig+0x2d4>)
 8001eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8001ebc:	095b      	lsrs	r3, r3, #5
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001ec4:	441c      	add	r4, r3
 8001ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001ed8:	4642      	mov	r2, r8
 8001eda:	464b      	mov	r3, r9
 8001edc:	1891      	adds	r1, r2, r2
 8001ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8001ee0:	415b      	adcs	r3, r3
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ee8:	4641      	mov	r1, r8
 8001eea:	1851      	adds	r1, r2, r1
 8001eec:	6339      	str	r1, [r7, #48]	; 0x30
 8001eee:	4649      	mov	r1, r9
 8001ef0:	414b      	adcs	r3, r1
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef4:	f04f 0200 	mov.w	r2, #0
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f00:	4659      	mov	r1, fp
 8001f02:	00cb      	lsls	r3, r1, #3
 8001f04:	4651      	mov	r1, sl
 8001f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f0a:	4651      	mov	r1, sl
 8001f0c:	00ca      	lsls	r2, r1, #3
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	4642      	mov	r2, r8
 8001f16:	189b      	adds	r3, r3, r2
 8001f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	460a      	mov	r2, r1
 8001f20:	eb42 0303 	adc.w	r3, r2, r3
 8001f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	18db      	adds	r3, r3, r3
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f42:	4613      	mov	r3, r2
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001f52:	f7fe f9b5 	bl	80002c0 <__aeabi_uldivmod>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <UART_SetConfig+0x2d4>)
 8001f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f60:	095b      	lsrs	r3, r3, #5
 8001f62:	2164      	movs	r1, #100	; 0x64
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	3332      	adds	r3, #50	; 0x32
 8001f6e:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <UART_SetConfig+0x2d4>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	f003 0207 	and.w	r2, r3, #7
 8001f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4422      	add	r2, r4
 8001f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f84:	e106      	b.n	8002194 <UART_SetConfig+0x4d8>
 8001f86:	bf00      	nop
 8001f88:	40011000 	.word	0x40011000
 8001f8c:	40011400 	.word	0x40011400
 8001f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001fa6:	4642      	mov	r2, r8
 8001fa8:	464b      	mov	r3, r9
 8001faa:	1891      	adds	r1, r2, r2
 8001fac:	6239      	str	r1, [r7, #32]
 8001fae:	415b      	adcs	r3, r3
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fb6:	4641      	mov	r1, r8
 8001fb8:	1854      	adds	r4, r2, r1
 8001fba:	4649      	mov	r1, r9
 8001fbc:	eb43 0501 	adc.w	r5, r3, r1
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	00eb      	lsls	r3, r5, #3
 8001fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fce:	00e2      	lsls	r2, r4, #3
 8001fd0:	4614      	mov	r4, r2
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	4643      	mov	r3, r8
 8001fd6:	18e3      	adds	r3, r4, r3
 8001fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001fdc:	464b      	mov	r3, r9
 8001fde:	eb45 0303 	adc.w	r3, r5, r3
 8001fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002002:	4629      	mov	r1, r5
 8002004:	008b      	lsls	r3, r1, #2
 8002006:	4621      	mov	r1, r4
 8002008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800200c:	4621      	mov	r1, r4
 800200e:	008a      	lsls	r2, r1, #2
 8002010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002014:	f7fe f954 	bl	80002c0 <__aeabi_uldivmod>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4b60      	ldr	r3, [pc, #384]	; (80021a0 <UART_SetConfig+0x4e4>)
 800201e:	fba3 2302 	umull	r2, r3, r3, r2
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	011c      	lsls	r4, r3, #4
 8002026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800202a:	2200      	movs	r2, #0
 800202c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002030:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002038:	4642      	mov	r2, r8
 800203a:	464b      	mov	r3, r9
 800203c:	1891      	adds	r1, r2, r2
 800203e:	61b9      	str	r1, [r7, #24]
 8002040:	415b      	adcs	r3, r3
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002048:	4641      	mov	r1, r8
 800204a:	1851      	adds	r1, r2, r1
 800204c:	6139      	str	r1, [r7, #16]
 800204e:	4649      	mov	r1, r9
 8002050:	414b      	adcs	r3, r1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002060:	4659      	mov	r1, fp
 8002062:	00cb      	lsls	r3, r1, #3
 8002064:	4651      	mov	r1, sl
 8002066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800206a:	4651      	mov	r1, sl
 800206c:	00ca      	lsls	r2, r1, #3
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	4603      	mov	r3, r0
 8002074:	4642      	mov	r2, r8
 8002076:	189b      	adds	r3, r3, r2
 8002078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800207c:	464b      	mov	r3, r9
 800207e:	460a      	mov	r2, r1
 8002080:	eb42 0303 	adc.w	r3, r2, r3
 8002084:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	67bb      	str	r3, [r7, #120]	; 0x78
 8002092:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80020a0:	4649      	mov	r1, r9
 80020a2:	008b      	lsls	r3, r1, #2
 80020a4:	4641      	mov	r1, r8
 80020a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020aa:	4641      	mov	r1, r8
 80020ac:	008a      	lsls	r2, r1, #2
 80020ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80020b2:	f7fe f905 	bl	80002c0 <__aeabi_uldivmod>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <UART_SetConfig+0x4e4>)
 80020be:	fba3 2301 	umull	r2, r3, r3, r1
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	2264      	movs	r2, #100	; 0x64
 80020c6:	fb02 f303 	mul.w	r3, r2, r3
 80020ca:	1acb      	subs	r3, r1, r3
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	3332      	adds	r3, #50	; 0x32
 80020d0:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <UART_SetConfig+0x4e4>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020dc:	441c      	add	r4, r3
 80020de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e2:	2200      	movs	r2, #0
 80020e4:	673b      	str	r3, [r7, #112]	; 0x70
 80020e6:	677a      	str	r2, [r7, #116]	; 0x74
 80020e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	1891      	adds	r1, r2, r2
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	415b      	adcs	r3, r3
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fc:	4641      	mov	r1, r8
 80020fe:	1851      	adds	r1, r2, r1
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	4649      	mov	r1, r9
 8002104:	414b      	adcs	r3, r1
 8002106:	607b      	str	r3, [r7, #4]
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002114:	4659      	mov	r1, fp
 8002116:	00cb      	lsls	r3, r1, #3
 8002118:	4651      	mov	r1, sl
 800211a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800211e:	4651      	mov	r1, sl
 8002120:	00ca      	lsls	r2, r1, #3
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	4603      	mov	r3, r0
 8002128:	4642      	mov	r2, r8
 800212a:	189b      	adds	r3, r3, r2
 800212c:	66bb      	str	r3, [r7, #104]	; 0x68
 800212e:	464b      	mov	r3, r9
 8002130:	460a      	mov	r2, r1
 8002132:	eb42 0303 	adc.w	r3, r2, r3
 8002136:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	663b      	str	r3, [r7, #96]	; 0x60
 8002142:	667a      	str	r2, [r7, #100]	; 0x64
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002150:	4649      	mov	r1, r9
 8002152:	008b      	lsls	r3, r1, #2
 8002154:	4641      	mov	r1, r8
 8002156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800215a:	4641      	mov	r1, r8
 800215c:	008a      	lsls	r2, r1, #2
 800215e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002162:	f7fe f8ad 	bl	80002c0 <__aeabi_uldivmod>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <UART_SetConfig+0x4e4>)
 800216c:	fba3 1302 	umull	r1, r3, r3, r2
 8002170:	095b      	lsrs	r3, r3, #5
 8002172:	2164      	movs	r1, #100	; 0x64
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	3332      	adds	r3, #50	; 0x32
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <UART_SetConfig+0x4e4>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	095b      	lsrs	r3, r3, #5
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4422      	add	r2, r4
 8002192:	609a      	str	r2, [r3, #8]
}
 8002194:	bf00      	nop
 8002196:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800219a:	46bd      	mov	sp, r7
 800219c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021a0:	51eb851f 	.word	0x51eb851f

080021a4 <sniprintf>:
 80021a4:	b40c      	push	{r2, r3}
 80021a6:	b530      	push	{r4, r5, lr}
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <sniprintf+0x64>)
 80021aa:	1e0c      	subs	r4, r1, #0
 80021ac:	681d      	ldr	r5, [r3, #0]
 80021ae:	b09d      	sub	sp, #116	; 0x74
 80021b0:	da08      	bge.n	80021c4 <sniprintf+0x20>
 80021b2:	238b      	movs	r3, #139	; 0x8b
 80021b4:	602b      	str	r3, [r5, #0]
 80021b6:	f04f 30ff 	mov.w	r0, #4294967295
 80021ba:	b01d      	add	sp, #116	; 0x74
 80021bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021c0:	b002      	add	sp, #8
 80021c2:	4770      	bx	lr
 80021c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80021c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80021cc:	bf14      	ite	ne
 80021ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 80021d2:	4623      	moveq	r3, r4
 80021d4:	9304      	str	r3, [sp, #16]
 80021d6:	9307      	str	r3, [sp, #28]
 80021d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021dc:	9002      	str	r0, [sp, #8]
 80021de:	9006      	str	r0, [sp, #24]
 80021e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80021e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80021e6:	ab21      	add	r3, sp, #132	; 0x84
 80021e8:	a902      	add	r1, sp, #8
 80021ea:	4628      	mov	r0, r5
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	f000 f993 	bl	8002518 <_svfiprintf_r>
 80021f2:	1c43      	adds	r3, r0, #1
 80021f4:	bfbc      	itt	lt
 80021f6:	238b      	movlt	r3, #139	; 0x8b
 80021f8:	602b      	strlt	r3, [r5, #0]
 80021fa:	2c00      	cmp	r4, #0
 80021fc:	d0dd      	beq.n	80021ba <sniprintf+0x16>
 80021fe:	9b02      	ldr	r3, [sp, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e7d9      	b.n	80021ba <sniprintf+0x16>
 8002206:	bf00      	nop
 8002208:	20000058 	.word	0x20000058

0800220c <memset>:
 800220c:	4402      	add	r2, r0
 800220e:	4603      	mov	r3, r0
 8002210:	4293      	cmp	r3, r2
 8002212:	d100      	bne.n	8002216 <memset+0xa>
 8002214:	4770      	bx	lr
 8002216:	f803 1b01 	strb.w	r1, [r3], #1
 800221a:	e7f9      	b.n	8002210 <memset+0x4>

0800221c <__errno>:
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <__errno+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000058 	.word	0x20000058

08002228 <__libc_init_array>:
 8002228:	b570      	push	{r4, r5, r6, lr}
 800222a:	4d0d      	ldr	r5, [pc, #52]	; (8002260 <__libc_init_array+0x38>)
 800222c:	4c0d      	ldr	r4, [pc, #52]	; (8002264 <__libc_init_array+0x3c>)
 800222e:	1b64      	subs	r4, r4, r5
 8002230:	10a4      	asrs	r4, r4, #2
 8002232:	2600      	movs	r6, #0
 8002234:	42a6      	cmp	r6, r4
 8002236:	d109      	bne.n	800224c <__libc_init_array+0x24>
 8002238:	4d0b      	ldr	r5, [pc, #44]	; (8002268 <__libc_init_array+0x40>)
 800223a:	4c0c      	ldr	r4, [pc, #48]	; (800226c <__libc_init_array+0x44>)
 800223c:	f000 fc6a 	bl	8002b14 <_init>
 8002240:	1b64      	subs	r4, r4, r5
 8002242:	10a4      	asrs	r4, r4, #2
 8002244:	2600      	movs	r6, #0
 8002246:	42a6      	cmp	r6, r4
 8002248:	d105      	bne.n	8002256 <__libc_init_array+0x2e>
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002250:	4798      	blx	r3
 8002252:	3601      	adds	r6, #1
 8002254:	e7ee      	b.n	8002234 <__libc_init_array+0xc>
 8002256:	f855 3b04 	ldr.w	r3, [r5], #4
 800225a:	4798      	blx	r3
 800225c:	3601      	adds	r6, #1
 800225e:	e7f2      	b.n	8002246 <__libc_init_array+0x1e>
 8002260:	08002b88 	.word	0x08002b88
 8002264:	08002b88 	.word	0x08002b88
 8002268:	08002b88 	.word	0x08002b88
 800226c:	08002b8c 	.word	0x08002b8c

08002270 <__retarget_lock_acquire_recursive>:
 8002270:	4770      	bx	lr

08002272 <__retarget_lock_release_recursive>:
 8002272:	4770      	bx	lr

08002274 <_free_r>:
 8002274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002276:	2900      	cmp	r1, #0
 8002278:	d044      	beq.n	8002304 <_free_r+0x90>
 800227a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800227e:	9001      	str	r0, [sp, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f1a1 0404 	sub.w	r4, r1, #4
 8002286:	bfb8      	it	lt
 8002288:	18e4      	addlt	r4, r4, r3
 800228a:	f000 f8df 	bl	800244c <__malloc_lock>
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <_free_r+0x94>)
 8002290:	9801      	ldr	r0, [sp, #4]
 8002292:	6813      	ldr	r3, [r2, #0]
 8002294:	b933      	cbnz	r3, 80022a4 <_free_r+0x30>
 8002296:	6063      	str	r3, [r4, #4]
 8002298:	6014      	str	r4, [r2, #0]
 800229a:	b003      	add	sp, #12
 800229c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80022a0:	f000 b8da 	b.w	8002458 <__malloc_unlock>
 80022a4:	42a3      	cmp	r3, r4
 80022a6:	d908      	bls.n	80022ba <_free_r+0x46>
 80022a8:	6825      	ldr	r5, [r4, #0]
 80022aa:	1961      	adds	r1, r4, r5
 80022ac:	428b      	cmp	r3, r1
 80022ae:	bf01      	itttt	eq
 80022b0:	6819      	ldreq	r1, [r3, #0]
 80022b2:	685b      	ldreq	r3, [r3, #4]
 80022b4:	1949      	addeq	r1, r1, r5
 80022b6:	6021      	streq	r1, [r4, #0]
 80022b8:	e7ed      	b.n	8002296 <_free_r+0x22>
 80022ba:	461a      	mov	r2, r3
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	b10b      	cbz	r3, 80022c4 <_free_r+0x50>
 80022c0:	42a3      	cmp	r3, r4
 80022c2:	d9fa      	bls.n	80022ba <_free_r+0x46>
 80022c4:	6811      	ldr	r1, [r2, #0]
 80022c6:	1855      	adds	r5, r2, r1
 80022c8:	42a5      	cmp	r5, r4
 80022ca:	d10b      	bne.n	80022e4 <_free_r+0x70>
 80022cc:	6824      	ldr	r4, [r4, #0]
 80022ce:	4421      	add	r1, r4
 80022d0:	1854      	adds	r4, r2, r1
 80022d2:	42a3      	cmp	r3, r4
 80022d4:	6011      	str	r1, [r2, #0]
 80022d6:	d1e0      	bne.n	800229a <_free_r+0x26>
 80022d8:	681c      	ldr	r4, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	6053      	str	r3, [r2, #4]
 80022de:	440c      	add	r4, r1
 80022e0:	6014      	str	r4, [r2, #0]
 80022e2:	e7da      	b.n	800229a <_free_r+0x26>
 80022e4:	d902      	bls.n	80022ec <_free_r+0x78>
 80022e6:	230c      	movs	r3, #12
 80022e8:	6003      	str	r3, [r0, #0]
 80022ea:	e7d6      	b.n	800229a <_free_r+0x26>
 80022ec:	6825      	ldr	r5, [r4, #0]
 80022ee:	1961      	adds	r1, r4, r5
 80022f0:	428b      	cmp	r3, r1
 80022f2:	bf04      	itt	eq
 80022f4:	6819      	ldreq	r1, [r3, #0]
 80022f6:	685b      	ldreq	r3, [r3, #4]
 80022f8:	6063      	str	r3, [r4, #4]
 80022fa:	bf04      	itt	eq
 80022fc:	1949      	addeq	r1, r1, r5
 80022fe:	6021      	streq	r1, [r4, #0]
 8002300:	6054      	str	r4, [r2, #4]
 8002302:	e7ca      	b.n	800229a <_free_r+0x26>
 8002304:	b003      	add	sp, #12
 8002306:	bd30      	pop	{r4, r5, pc}
 8002308:	20000208 	.word	0x20000208

0800230c <sbrk_aligned>:
 800230c:	b570      	push	{r4, r5, r6, lr}
 800230e:	4e0e      	ldr	r6, [pc, #56]	; (8002348 <sbrk_aligned+0x3c>)
 8002310:	460c      	mov	r4, r1
 8002312:	6831      	ldr	r1, [r6, #0]
 8002314:	4605      	mov	r5, r0
 8002316:	b911      	cbnz	r1, 800231e <sbrk_aligned+0x12>
 8002318:	f000 fba6 	bl	8002a68 <_sbrk_r>
 800231c:	6030      	str	r0, [r6, #0]
 800231e:	4621      	mov	r1, r4
 8002320:	4628      	mov	r0, r5
 8002322:	f000 fba1 	bl	8002a68 <_sbrk_r>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	d00a      	beq.n	8002340 <sbrk_aligned+0x34>
 800232a:	1cc4      	adds	r4, r0, #3
 800232c:	f024 0403 	bic.w	r4, r4, #3
 8002330:	42a0      	cmp	r0, r4
 8002332:	d007      	beq.n	8002344 <sbrk_aligned+0x38>
 8002334:	1a21      	subs	r1, r4, r0
 8002336:	4628      	mov	r0, r5
 8002338:	f000 fb96 	bl	8002a68 <_sbrk_r>
 800233c:	3001      	adds	r0, #1
 800233e:	d101      	bne.n	8002344 <sbrk_aligned+0x38>
 8002340:	f04f 34ff 	mov.w	r4, #4294967295
 8002344:	4620      	mov	r0, r4
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	2000020c 	.word	0x2000020c

0800234c <_malloc_r>:
 800234c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002350:	1ccd      	adds	r5, r1, #3
 8002352:	f025 0503 	bic.w	r5, r5, #3
 8002356:	3508      	adds	r5, #8
 8002358:	2d0c      	cmp	r5, #12
 800235a:	bf38      	it	cc
 800235c:	250c      	movcc	r5, #12
 800235e:	2d00      	cmp	r5, #0
 8002360:	4607      	mov	r7, r0
 8002362:	db01      	blt.n	8002368 <_malloc_r+0x1c>
 8002364:	42a9      	cmp	r1, r5
 8002366:	d905      	bls.n	8002374 <_malloc_r+0x28>
 8002368:	230c      	movs	r3, #12
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	2600      	movs	r6, #0
 800236e:	4630      	mov	r0, r6
 8002370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002374:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002448 <_malloc_r+0xfc>
 8002378:	f000 f868 	bl	800244c <__malloc_lock>
 800237c:	f8d8 3000 	ldr.w	r3, [r8]
 8002380:	461c      	mov	r4, r3
 8002382:	bb5c      	cbnz	r4, 80023dc <_malloc_r+0x90>
 8002384:	4629      	mov	r1, r5
 8002386:	4638      	mov	r0, r7
 8002388:	f7ff ffc0 	bl	800230c <sbrk_aligned>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	4604      	mov	r4, r0
 8002390:	d155      	bne.n	800243e <_malloc_r+0xf2>
 8002392:	f8d8 4000 	ldr.w	r4, [r8]
 8002396:	4626      	mov	r6, r4
 8002398:	2e00      	cmp	r6, #0
 800239a:	d145      	bne.n	8002428 <_malloc_r+0xdc>
 800239c:	2c00      	cmp	r4, #0
 800239e:	d048      	beq.n	8002432 <_malloc_r+0xe6>
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	4631      	mov	r1, r6
 80023a4:	4638      	mov	r0, r7
 80023a6:	eb04 0903 	add.w	r9, r4, r3
 80023aa:	f000 fb5d 	bl	8002a68 <_sbrk_r>
 80023ae:	4581      	cmp	r9, r0
 80023b0:	d13f      	bne.n	8002432 <_malloc_r+0xe6>
 80023b2:	6821      	ldr	r1, [r4, #0]
 80023b4:	1a6d      	subs	r5, r5, r1
 80023b6:	4629      	mov	r1, r5
 80023b8:	4638      	mov	r0, r7
 80023ba:	f7ff ffa7 	bl	800230c <sbrk_aligned>
 80023be:	3001      	adds	r0, #1
 80023c0:	d037      	beq.n	8002432 <_malloc_r+0xe6>
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	442b      	add	r3, r5
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	f8d8 3000 	ldr.w	r3, [r8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d038      	beq.n	8002442 <_malloc_r+0xf6>
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	42a2      	cmp	r2, r4
 80023d4:	d12b      	bne.n	800242e <_malloc_r+0xe2>
 80023d6:	2200      	movs	r2, #0
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	e00f      	b.n	80023fc <_malloc_r+0xb0>
 80023dc:	6822      	ldr	r2, [r4, #0]
 80023de:	1b52      	subs	r2, r2, r5
 80023e0:	d41f      	bmi.n	8002422 <_malloc_r+0xd6>
 80023e2:	2a0b      	cmp	r2, #11
 80023e4:	d917      	bls.n	8002416 <_malloc_r+0xca>
 80023e6:	1961      	adds	r1, r4, r5
 80023e8:	42a3      	cmp	r3, r4
 80023ea:	6025      	str	r5, [r4, #0]
 80023ec:	bf18      	it	ne
 80023ee:	6059      	strne	r1, [r3, #4]
 80023f0:	6863      	ldr	r3, [r4, #4]
 80023f2:	bf08      	it	eq
 80023f4:	f8c8 1000 	streq.w	r1, [r8]
 80023f8:	5162      	str	r2, [r4, r5]
 80023fa:	604b      	str	r3, [r1, #4]
 80023fc:	4638      	mov	r0, r7
 80023fe:	f104 060b 	add.w	r6, r4, #11
 8002402:	f000 f829 	bl	8002458 <__malloc_unlock>
 8002406:	f026 0607 	bic.w	r6, r6, #7
 800240a:	1d23      	adds	r3, r4, #4
 800240c:	1af2      	subs	r2, r6, r3
 800240e:	d0ae      	beq.n	800236e <_malloc_r+0x22>
 8002410:	1b9b      	subs	r3, r3, r6
 8002412:	50a3      	str	r3, [r4, r2]
 8002414:	e7ab      	b.n	800236e <_malloc_r+0x22>
 8002416:	42a3      	cmp	r3, r4
 8002418:	6862      	ldr	r2, [r4, #4]
 800241a:	d1dd      	bne.n	80023d8 <_malloc_r+0x8c>
 800241c:	f8c8 2000 	str.w	r2, [r8]
 8002420:	e7ec      	b.n	80023fc <_malloc_r+0xb0>
 8002422:	4623      	mov	r3, r4
 8002424:	6864      	ldr	r4, [r4, #4]
 8002426:	e7ac      	b.n	8002382 <_malloc_r+0x36>
 8002428:	4634      	mov	r4, r6
 800242a:	6876      	ldr	r6, [r6, #4]
 800242c:	e7b4      	b.n	8002398 <_malloc_r+0x4c>
 800242e:	4613      	mov	r3, r2
 8002430:	e7cc      	b.n	80023cc <_malloc_r+0x80>
 8002432:	230c      	movs	r3, #12
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4638      	mov	r0, r7
 8002438:	f000 f80e 	bl	8002458 <__malloc_unlock>
 800243c:	e797      	b.n	800236e <_malloc_r+0x22>
 800243e:	6025      	str	r5, [r4, #0]
 8002440:	e7dc      	b.n	80023fc <_malloc_r+0xb0>
 8002442:	605b      	str	r3, [r3, #4]
 8002444:	deff      	udf	#255	; 0xff
 8002446:	bf00      	nop
 8002448:	20000208 	.word	0x20000208

0800244c <__malloc_lock>:
 800244c:	4801      	ldr	r0, [pc, #4]	; (8002454 <__malloc_lock+0x8>)
 800244e:	f7ff bf0f 	b.w	8002270 <__retarget_lock_acquire_recursive>
 8002452:	bf00      	nop
 8002454:	20000204 	.word	0x20000204

08002458 <__malloc_unlock>:
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <__malloc_unlock+0x8>)
 800245a:	f7ff bf0a 	b.w	8002272 <__retarget_lock_release_recursive>
 800245e:	bf00      	nop
 8002460:	20000204 	.word	0x20000204

08002464 <__ssputs_r>:
 8002464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002468:	688e      	ldr	r6, [r1, #8]
 800246a:	461f      	mov	r7, r3
 800246c:	42be      	cmp	r6, r7
 800246e:	680b      	ldr	r3, [r1, #0]
 8002470:	4682      	mov	sl, r0
 8002472:	460c      	mov	r4, r1
 8002474:	4690      	mov	r8, r2
 8002476:	d82c      	bhi.n	80024d2 <__ssputs_r+0x6e>
 8002478:	898a      	ldrh	r2, [r1, #12]
 800247a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800247e:	d026      	beq.n	80024ce <__ssputs_r+0x6a>
 8002480:	6965      	ldr	r5, [r4, #20]
 8002482:	6909      	ldr	r1, [r1, #16]
 8002484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002488:	eba3 0901 	sub.w	r9, r3, r1
 800248c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002490:	1c7b      	adds	r3, r7, #1
 8002492:	444b      	add	r3, r9
 8002494:	106d      	asrs	r5, r5, #1
 8002496:	429d      	cmp	r5, r3
 8002498:	bf38      	it	cc
 800249a:	461d      	movcc	r5, r3
 800249c:	0553      	lsls	r3, r2, #21
 800249e:	d527      	bpl.n	80024f0 <__ssputs_r+0x8c>
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7ff ff53 	bl	800234c <_malloc_r>
 80024a6:	4606      	mov	r6, r0
 80024a8:	b360      	cbz	r0, 8002504 <__ssputs_r+0xa0>
 80024aa:	6921      	ldr	r1, [r4, #16]
 80024ac:	464a      	mov	r2, r9
 80024ae:	f000 faeb 	bl	8002a88 <memcpy>
 80024b2:	89a3      	ldrh	r3, [r4, #12]
 80024b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80024b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024bc:	81a3      	strh	r3, [r4, #12]
 80024be:	6126      	str	r6, [r4, #16]
 80024c0:	6165      	str	r5, [r4, #20]
 80024c2:	444e      	add	r6, r9
 80024c4:	eba5 0509 	sub.w	r5, r5, r9
 80024c8:	6026      	str	r6, [r4, #0]
 80024ca:	60a5      	str	r5, [r4, #8]
 80024cc:	463e      	mov	r6, r7
 80024ce:	42be      	cmp	r6, r7
 80024d0:	d900      	bls.n	80024d4 <__ssputs_r+0x70>
 80024d2:	463e      	mov	r6, r7
 80024d4:	6820      	ldr	r0, [r4, #0]
 80024d6:	4632      	mov	r2, r6
 80024d8:	4641      	mov	r1, r8
 80024da:	f000 faab 	bl	8002a34 <memmove>
 80024de:	68a3      	ldr	r3, [r4, #8]
 80024e0:	1b9b      	subs	r3, r3, r6
 80024e2:	60a3      	str	r3, [r4, #8]
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	4433      	add	r3, r6
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	2000      	movs	r0, #0
 80024ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f0:	462a      	mov	r2, r5
 80024f2:	f000 fad7 	bl	8002aa4 <_realloc_r>
 80024f6:	4606      	mov	r6, r0
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d1e0      	bne.n	80024be <__ssputs_r+0x5a>
 80024fc:	6921      	ldr	r1, [r4, #16]
 80024fe:	4650      	mov	r0, sl
 8002500:	f7ff feb8 	bl	8002274 <_free_r>
 8002504:	230c      	movs	r3, #12
 8002506:	f8ca 3000 	str.w	r3, [sl]
 800250a:	89a3      	ldrh	r3, [r4, #12]
 800250c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002510:	81a3      	strh	r3, [r4, #12]
 8002512:	f04f 30ff 	mov.w	r0, #4294967295
 8002516:	e7e9      	b.n	80024ec <__ssputs_r+0x88>

08002518 <_svfiprintf_r>:
 8002518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800251c:	4698      	mov	r8, r3
 800251e:	898b      	ldrh	r3, [r1, #12]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	b09d      	sub	sp, #116	; 0x74
 8002524:	4607      	mov	r7, r0
 8002526:	460d      	mov	r5, r1
 8002528:	4614      	mov	r4, r2
 800252a:	d50e      	bpl.n	800254a <_svfiprintf_r+0x32>
 800252c:	690b      	ldr	r3, [r1, #16]
 800252e:	b963      	cbnz	r3, 800254a <_svfiprintf_r+0x32>
 8002530:	2140      	movs	r1, #64	; 0x40
 8002532:	f7ff ff0b 	bl	800234c <_malloc_r>
 8002536:	6028      	str	r0, [r5, #0]
 8002538:	6128      	str	r0, [r5, #16]
 800253a:	b920      	cbnz	r0, 8002546 <_svfiprintf_r+0x2e>
 800253c:	230c      	movs	r3, #12
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	e0d0      	b.n	80026e8 <_svfiprintf_r+0x1d0>
 8002546:	2340      	movs	r3, #64	; 0x40
 8002548:	616b      	str	r3, [r5, #20]
 800254a:	2300      	movs	r3, #0
 800254c:	9309      	str	r3, [sp, #36]	; 0x24
 800254e:	2320      	movs	r3, #32
 8002550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002554:	f8cd 800c 	str.w	r8, [sp, #12]
 8002558:	2330      	movs	r3, #48	; 0x30
 800255a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002700 <_svfiprintf_r+0x1e8>
 800255e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002562:	f04f 0901 	mov.w	r9, #1
 8002566:	4623      	mov	r3, r4
 8002568:	469a      	mov	sl, r3
 800256a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800256e:	b10a      	cbz	r2, 8002574 <_svfiprintf_r+0x5c>
 8002570:	2a25      	cmp	r2, #37	; 0x25
 8002572:	d1f9      	bne.n	8002568 <_svfiprintf_r+0x50>
 8002574:	ebba 0b04 	subs.w	fp, sl, r4
 8002578:	d00b      	beq.n	8002592 <_svfiprintf_r+0x7a>
 800257a:	465b      	mov	r3, fp
 800257c:	4622      	mov	r2, r4
 800257e:	4629      	mov	r1, r5
 8002580:	4638      	mov	r0, r7
 8002582:	f7ff ff6f 	bl	8002464 <__ssputs_r>
 8002586:	3001      	adds	r0, #1
 8002588:	f000 80a9 	beq.w	80026de <_svfiprintf_r+0x1c6>
 800258c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800258e:	445a      	add	r2, fp
 8002590:	9209      	str	r2, [sp, #36]	; 0x24
 8002592:	f89a 3000 	ldrb.w	r3, [sl]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80a1 	beq.w	80026de <_svfiprintf_r+0x1c6>
 800259c:	2300      	movs	r3, #0
 800259e:	f04f 32ff 	mov.w	r2, #4294967295
 80025a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025a6:	f10a 0a01 	add.w	sl, sl, #1
 80025aa:	9304      	str	r3, [sp, #16]
 80025ac:	9307      	str	r3, [sp, #28]
 80025ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025b2:	931a      	str	r3, [sp, #104]	; 0x68
 80025b4:	4654      	mov	r4, sl
 80025b6:	2205      	movs	r2, #5
 80025b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025bc:	4850      	ldr	r0, [pc, #320]	; (8002700 <_svfiprintf_r+0x1e8>)
 80025be:	f7fd fe2f 	bl	8000220 <memchr>
 80025c2:	9a04      	ldr	r2, [sp, #16]
 80025c4:	b9d8      	cbnz	r0, 80025fe <_svfiprintf_r+0xe6>
 80025c6:	06d0      	lsls	r0, r2, #27
 80025c8:	bf44      	itt	mi
 80025ca:	2320      	movmi	r3, #32
 80025cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025d0:	0711      	lsls	r1, r2, #28
 80025d2:	bf44      	itt	mi
 80025d4:	232b      	movmi	r3, #43	; 0x2b
 80025d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80025da:	f89a 3000 	ldrb.w	r3, [sl]
 80025de:	2b2a      	cmp	r3, #42	; 0x2a
 80025e0:	d015      	beq.n	800260e <_svfiprintf_r+0xf6>
 80025e2:	9a07      	ldr	r2, [sp, #28]
 80025e4:	4654      	mov	r4, sl
 80025e6:	2000      	movs	r0, #0
 80025e8:	f04f 0c0a 	mov.w	ip, #10
 80025ec:	4621      	mov	r1, r4
 80025ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025f2:	3b30      	subs	r3, #48	; 0x30
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	d94d      	bls.n	8002694 <_svfiprintf_r+0x17c>
 80025f8:	b1b0      	cbz	r0, 8002628 <_svfiprintf_r+0x110>
 80025fa:	9207      	str	r2, [sp, #28]
 80025fc:	e014      	b.n	8002628 <_svfiprintf_r+0x110>
 80025fe:	eba0 0308 	sub.w	r3, r0, r8
 8002602:	fa09 f303 	lsl.w	r3, r9, r3
 8002606:	4313      	orrs	r3, r2
 8002608:	9304      	str	r3, [sp, #16]
 800260a:	46a2      	mov	sl, r4
 800260c:	e7d2      	b.n	80025b4 <_svfiprintf_r+0x9c>
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	1d19      	adds	r1, r3, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	9103      	str	r1, [sp, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	bfbb      	ittet	lt
 800261a:	425b      	neglt	r3, r3
 800261c:	f042 0202 	orrlt.w	r2, r2, #2
 8002620:	9307      	strge	r3, [sp, #28]
 8002622:	9307      	strlt	r3, [sp, #28]
 8002624:	bfb8      	it	lt
 8002626:	9204      	strlt	r2, [sp, #16]
 8002628:	7823      	ldrb	r3, [r4, #0]
 800262a:	2b2e      	cmp	r3, #46	; 0x2e
 800262c:	d10c      	bne.n	8002648 <_svfiprintf_r+0x130>
 800262e:	7863      	ldrb	r3, [r4, #1]
 8002630:	2b2a      	cmp	r3, #42	; 0x2a
 8002632:	d134      	bne.n	800269e <_svfiprintf_r+0x186>
 8002634:	9b03      	ldr	r3, [sp, #12]
 8002636:	1d1a      	adds	r2, r3, #4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	9203      	str	r2, [sp, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	bfb8      	it	lt
 8002640:	f04f 33ff 	movlt.w	r3, #4294967295
 8002644:	3402      	adds	r4, #2
 8002646:	9305      	str	r3, [sp, #20]
 8002648:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002710 <_svfiprintf_r+0x1f8>
 800264c:	7821      	ldrb	r1, [r4, #0]
 800264e:	2203      	movs	r2, #3
 8002650:	4650      	mov	r0, sl
 8002652:	f7fd fde5 	bl	8000220 <memchr>
 8002656:	b138      	cbz	r0, 8002668 <_svfiprintf_r+0x150>
 8002658:	9b04      	ldr	r3, [sp, #16]
 800265a:	eba0 000a 	sub.w	r0, r0, sl
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	4082      	lsls	r2, r0
 8002662:	4313      	orrs	r3, r2
 8002664:	3401      	adds	r4, #1
 8002666:	9304      	str	r3, [sp, #16]
 8002668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266c:	4825      	ldr	r0, [pc, #148]	; (8002704 <_svfiprintf_r+0x1ec>)
 800266e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002672:	2206      	movs	r2, #6
 8002674:	f7fd fdd4 	bl	8000220 <memchr>
 8002678:	2800      	cmp	r0, #0
 800267a:	d038      	beq.n	80026ee <_svfiprintf_r+0x1d6>
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <_svfiprintf_r+0x1f0>)
 800267e:	bb1b      	cbnz	r3, 80026c8 <_svfiprintf_r+0x1b0>
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	3307      	adds	r3, #7
 8002684:	f023 0307 	bic.w	r3, r3, #7
 8002688:	3308      	adds	r3, #8
 800268a:	9303      	str	r3, [sp, #12]
 800268c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800268e:	4433      	add	r3, r6
 8002690:	9309      	str	r3, [sp, #36]	; 0x24
 8002692:	e768      	b.n	8002566 <_svfiprintf_r+0x4e>
 8002694:	fb0c 3202 	mla	r2, ip, r2, r3
 8002698:	460c      	mov	r4, r1
 800269a:	2001      	movs	r0, #1
 800269c:	e7a6      	b.n	80025ec <_svfiprintf_r+0xd4>
 800269e:	2300      	movs	r3, #0
 80026a0:	3401      	adds	r4, #1
 80026a2:	9305      	str	r3, [sp, #20]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f04f 0c0a 	mov.w	ip, #10
 80026aa:	4620      	mov	r0, r4
 80026ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026b0:	3a30      	subs	r2, #48	; 0x30
 80026b2:	2a09      	cmp	r2, #9
 80026b4:	d903      	bls.n	80026be <_svfiprintf_r+0x1a6>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0c6      	beq.n	8002648 <_svfiprintf_r+0x130>
 80026ba:	9105      	str	r1, [sp, #20]
 80026bc:	e7c4      	b.n	8002648 <_svfiprintf_r+0x130>
 80026be:	fb0c 2101 	mla	r1, ip, r1, r2
 80026c2:	4604      	mov	r4, r0
 80026c4:	2301      	movs	r3, #1
 80026c6:	e7f0      	b.n	80026aa <_svfiprintf_r+0x192>
 80026c8:	ab03      	add	r3, sp, #12
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	462a      	mov	r2, r5
 80026ce:	4b0f      	ldr	r3, [pc, #60]	; (800270c <_svfiprintf_r+0x1f4>)
 80026d0:	a904      	add	r1, sp, #16
 80026d2:	4638      	mov	r0, r7
 80026d4:	f3af 8000 	nop.w
 80026d8:	1c42      	adds	r2, r0, #1
 80026da:	4606      	mov	r6, r0
 80026dc:	d1d6      	bne.n	800268c <_svfiprintf_r+0x174>
 80026de:	89ab      	ldrh	r3, [r5, #12]
 80026e0:	065b      	lsls	r3, r3, #25
 80026e2:	f53f af2d 	bmi.w	8002540 <_svfiprintf_r+0x28>
 80026e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e8:	b01d      	add	sp, #116	; 0x74
 80026ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ee:	ab03      	add	r3, sp, #12
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	462a      	mov	r2, r5
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <_svfiprintf_r+0x1f4>)
 80026f6:	a904      	add	r1, sp, #16
 80026f8:	4638      	mov	r0, r7
 80026fa:	f000 f879 	bl	80027f0 <_printf_i>
 80026fe:	e7eb      	b.n	80026d8 <_svfiprintf_r+0x1c0>
 8002700:	08002b4c 	.word	0x08002b4c
 8002704:	08002b56 	.word	0x08002b56
 8002708:	00000000 	.word	0x00000000
 800270c:	08002465 	.word	0x08002465
 8002710:	08002b52 	.word	0x08002b52

08002714 <_printf_common>:
 8002714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002718:	4616      	mov	r6, r2
 800271a:	4699      	mov	r9, r3
 800271c:	688a      	ldr	r2, [r1, #8]
 800271e:	690b      	ldr	r3, [r1, #16]
 8002720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002724:	4293      	cmp	r3, r2
 8002726:	bfb8      	it	lt
 8002728:	4613      	movlt	r3, r2
 800272a:	6033      	str	r3, [r6, #0]
 800272c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002730:	4607      	mov	r7, r0
 8002732:	460c      	mov	r4, r1
 8002734:	b10a      	cbz	r2, 800273a <_printf_common+0x26>
 8002736:	3301      	adds	r3, #1
 8002738:	6033      	str	r3, [r6, #0]
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	0699      	lsls	r1, r3, #26
 800273e:	bf42      	ittt	mi
 8002740:	6833      	ldrmi	r3, [r6, #0]
 8002742:	3302      	addmi	r3, #2
 8002744:	6033      	strmi	r3, [r6, #0]
 8002746:	6825      	ldr	r5, [r4, #0]
 8002748:	f015 0506 	ands.w	r5, r5, #6
 800274c:	d106      	bne.n	800275c <_printf_common+0x48>
 800274e:	f104 0a19 	add.w	sl, r4, #25
 8002752:	68e3      	ldr	r3, [r4, #12]
 8002754:	6832      	ldr	r2, [r6, #0]
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	42ab      	cmp	r3, r5
 800275a:	dc26      	bgt.n	80027aa <_printf_common+0x96>
 800275c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002760:	1e13      	subs	r3, r2, #0
 8002762:	6822      	ldr	r2, [r4, #0]
 8002764:	bf18      	it	ne
 8002766:	2301      	movne	r3, #1
 8002768:	0692      	lsls	r2, r2, #26
 800276a:	d42b      	bmi.n	80027c4 <_printf_common+0xb0>
 800276c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002770:	4649      	mov	r1, r9
 8002772:	4638      	mov	r0, r7
 8002774:	47c0      	blx	r8
 8002776:	3001      	adds	r0, #1
 8002778:	d01e      	beq.n	80027b8 <_printf_common+0xa4>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	6922      	ldr	r2, [r4, #16]
 800277e:	f003 0306 	and.w	r3, r3, #6
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf02      	ittt	eq
 8002786:	68e5      	ldreq	r5, [r4, #12]
 8002788:	6833      	ldreq	r3, [r6, #0]
 800278a:	1aed      	subeq	r5, r5, r3
 800278c:	68a3      	ldr	r3, [r4, #8]
 800278e:	bf0c      	ite	eq
 8002790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002794:	2500      	movne	r5, #0
 8002796:	4293      	cmp	r3, r2
 8002798:	bfc4      	itt	gt
 800279a:	1a9b      	subgt	r3, r3, r2
 800279c:	18ed      	addgt	r5, r5, r3
 800279e:	2600      	movs	r6, #0
 80027a0:	341a      	adds	r4, #26
 80027a2:	42b5      	cmp	r5, r6
 80027a4:	d11a      	bne.n	80027dc <_printf_common+0xc8>
 80027a6:	2000      	movs	r0, #0
 80027a8:	e008      	b.n	80027bc <_printf_common+0xa8>
 80027aa:	2301      	movs	r3, #1
 80027ac:	4652      	mov	r2, sl
 80027ae:	4649      	mov	r1, r9
 80027b0:	4638      	mov	r0, r7
 80027b2:	47c0      	blx	r8
 80027b4:	3001      	adds	r0, #1
 80027b6:	d103      	bne.n	80027c0 <_printf_common+0xac>
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c0:	3501      	adds	r5, #1
 80027c2:	e7c6      	b.n	8002752 <_printf_common+0x3e>
 80027c4:	18e1      	adds	r1, r4, r3
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	2030      	movs	r0, #48	; 0x30
 80027ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027ce:	4422      	add	r2, r4
 80027d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027d8:	3302      	adds	r3, #2
 80027da:	e7c7      	b.n	800276c <_printf_common+0x58>
 80027dc:	2301      	movs	r3, #1
 80027de:	4622      	mov	r2, r4
 80027e0:	4649      	mov	r1, r9
 80027e2:	4638      	mov	r0, r7
 80027e4:	47c0      	blx	r8
 80027e6:	3001      	adds	r0, #1
 80027e8:	d0e6      	beq.n	80027b8 <_printf_common+0xa4>
 80027ea:	3601      	adds	r6, #1
 80027ec:	e7d9      	b.n	80027a2 <_printf_common+0x8e>
	...

080027f0 <_printf_i>:
 80027f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027f4:	7e0f      	ldrb	r7, [r1, #24]
 80027f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80027f8:	2f78      	cmp	r7, #120	; 0x78
 80027fa:	4691      	mov	r9, r2
 80027fc:	4680      	mov	r8, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	469a      	mov	sl, r3
 8002802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002806:	d807      	bhi.n	8002818 <_printf_i+0x28>
 8002808:	2f62      	cmp	r7, #98	; 0x62
 800280a:	d80a      	bhi.n	8002822 <_printf_i+0x32>
 800280c:	2f00      	cmp	r7, #0
 800280e:	f000 80d4 	beq.w	80029ba <_printf_i+0x1ca>
 8002812:	2f58      	cmp	r7, #88	; 0x58
 8002814:	f000 80c0 	beq.w	8002998 <_printf_i+0x1a8>
 8002818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800281c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002820:	e03a      	b.n	8002898 <_printf_i+0xa8>
 8002822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002826:	2b15      	cmp	r3, #21
 8002828:	d8f6      	bhi.n	8002818 <_printf_i+0x28>
 800282a:	a101      	add	r1, pc, #4	; (adr r1, 8002830 <_printf_i+0x40>)
 800282c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002830:	08002889 	.word	0x08002889
 8002834:	0800289d 	.word	0x0800289d
 8002838:	08002819 	.word	0x08002819
 800283c:	08002819 	.word	0x08002819
 8002840:	08002819 	.word	0x08002819
 8002844:	08002819 	.word	0x08002819
 8002848:	0800289d 	.word	0x0800289d
 800284c:	08002819 	.word	0x08002819
 8002850:	08002819 	.word	0x08002819
 8002854:	08002819 	.word	0x08002819
 8002858:	08002819 	.word	0x08002819
 800285c:	080029a1 	.word	0x080029a1
 8002860:	080028c9 	.word	0x080028c9
 8002864:	0800295b 	.word	0x0800295b
 8002868:	08002819 	.word	0x08002819
 800286c:	08002819 	.word	0x08002819
 8002870:	080029c3 	.word	0x080029c3
 8002874:	08002819 	.word	0x08002819
 8002878:	080028c9 	.word	0x080028c9
 800287c:	08002819 	.word	0x08002819
 8002880:	08002819 	.word	0x08002819
 8002884:	08002963 	.word	0x08002963
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	1d1a      	adds	r2, r3, #4
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	602a      	str	r2, [r5, #0]
 8002890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002898:	2301      	movs	r3, #1
 800289a:	e09f      	b.n	80029dc <_printf_i+0x1ec>
 800289c:	6820      	ldr	r0, [r4, #0]
 800289e:	682b      	ldr	r3, [r5, #0]
 80028a0:	0607      	lsls	r7, r0, #24
 80028a2:	f103 0104 	add.w	r1, r3, #4
 80028a6:	6029      	str	r1, [r5, #0]
 80028a8:	d501      	bpl.n	80028ae <_printf_i+0xbe>
 80028aa:	681e      	ldr	r6, [r3, #0]
 80028ac:	e003      	b.n	80028b6 <_printf_i+0xc6>
 80028ae:	0646      	lsls	r6, r0, #25
 80028b0:	d5fb      	bpl.n	80028aa <_printf_i+0xba>
 80028b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80028b6:	2e00      	cmp	r6, #0
 80028b8:	da03      	bge.n	80028c2 <_printf_i+0xd2>
 80028ba:	232d      	movs	r3, #45	; 0x2d
 80028bc:	4276      	negs	r6, r6
 80028be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028c2:	485a      	ldr	r0, [pc, #360]	; (8002a2c <_printf_i+0x23c>)
 80028c4:	230a      	movs	r3, #10
 80028c6:	e012      	b.n	80028ee <_printf_i+0xfe>
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	6820      	ldr	r0, [r4, #0]
 80028cc:	1d19      	adds	r1, r3, #4
 80028ce:	6029      	str	r1, [r5, #0]
 80028d0:	0605      	lsls	r5, r0, #24
 80028d2:	d501      	bpl.n	80028d8 <_printf_i+0xe8>
 80028d4:	681e      	ldr	r6, [r3, #0]
 80028d6:	e002      	b.n	80028de <_printf_i+0xee>
 80028d8:	0641      	lsls	r1, r0, #25
 80028da:	d5fb      	bpl.n	80028d4 <_printf_i+0xe4>
 80028dc:	881e      	ldrh	r6, [r3, #0]
 80028de:	4853      	ldr	r0, [pc, #332]	; (8002a2c <_printf_i+0x23c>)
 80028e0:	2f6f      	cmp	r7, #111	; 0x6f
 80028e2:	bf0c      	ite	eq
 80028e4:	2308      	moveq	r3, #8
 80028e6:	230a      	movne	r3, #10
 80028e8:	2100      	movs	r1, #0
 80028ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028ee:	6865      	ldr	r5, [r4, #4]
 80028f0:	60a5      	str	r5, [r4, #8]
 80028f2:	2d00      	cmp	r5, #0
 80028f4:	bfa2      	ittt	ge
 80028f6:	6821      	ldrge	r1, [r4, #0]
 80028f8:	f021 0104 	bicge.w	r1, r1, #4
 80028fc:	6021      	strge	r1, [r4, #0]
 80028fe:	b90e      	cbnz	r6, 8002904 <_printf_i+0x114>
 8002900:	2d00      	cmp	r5, #0
 8002902:	d04b      	beq.n	800299c <_printf_i+0x1ac>
 8002904:	4615      	mov	r5, r2
 8002906:	fbb6 f1f3 	udiv	r1, r6, r3
 800290a:	fb03 6711 	mls	r7, r3, r1, r6
 800290e:	5dc7      	ldrb	r7, [r0, r7]
 8002910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002914:	4637      	mov	r7, r6
 8002916:	42bb      	cmp	r3, r7
 8002918:	460e      	mov	r6, r1
 800291a:	d9f4      	bls.n	8002906 <_printf_i+0x116>
 800291c:	2b08      	cmp	r3, #8
 800291e:	d10b      	bne.n	8002938 <_printf_i+0x148>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	07de      	lsls	r6, r3, #31
 8002924:	d508      	bpl.n	8002938 <_printf_i+0x148>
 8002926:	6923      	ldr	r3, [r4, #16]
 8002928:	6861      	ldr	r1, [r4, #4]
 800292a:	4299      	cmp	r1, r3
 800292c:	bfde      	ittt	le
 800292e:	2330      	movle	r3, #48	; 0x30
 8002930:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002934:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002938:	1b52      	subs	r2, r2, r5
 800293a:	6122      	str	r2, [r4, #16]
 800293c:	f8cd a000 	str.w	sl, [sp]
 8002940:	464b      	mov	r3, r9
 8002942:	aa03      	add	r2, sp, #12
 8002944:	4621      	mov	r1, r4
 8002946:	4640      	mov	r0, r8
 8002948:	f7ff fee4 	bl	8002714 <_printf_common>
 800294c:	3001      	adds	r0, #1
 800294e:	d14a      	bne.n	80029e6 <_printf_i+0x1f6>
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	b004      	add	sp, #16
 8002956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	f043 0320 	orr.w	r3, r3, #32
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	4833      	ldr	r0, [pc, #204]	; (8002a30 <_printf_i+0x240>)
 8002964:	2778      	movs	r7, #120	; 0x78
 8002966:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	6829      	ldr	r1, [r5, #0]
 800296e:	061f      	lsls	r7, r3, #24
 8002970:	f851 6b04 	ldr.w	r6, [r1], #4
 8002974:	d402      	bmi.n	800297c <_printf_i+0x18c>
 8002976:	065f      	lsls	r7, r3, #25
 8002978:	bf48      	it	mi
 800297a:	b2b6      	uxthmi	r6, r6
 800297c:	07df      	lsls	r7, r3, #31
 800297e:	bf48      	it	mi
 8002980:	f043 0320 	orrmi.w	r3, r3, #32
 8002984:	6029      	str	r1, [r5, #0]
 8002986:	bf48      	it	mi
 8002988:	6023      	strmi	r3, [r4, #0]
 800298a:	b91e      	cbnz	r6, 8002994 <_printf_i+0x1a4>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	f023 0320 	bic.w	r3, r3, #32
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	2310      	movs	r3, #16
 8002996:	e7a7      	b.n	80028e8 <_printf_i+0xf8>
 8002998:	4824      	ldr	r0, [pc, #144]	; (8002a2c <_printf_i+0x23c>)
 800299a:	e7e4      	b.n	8002966 <_printf_i+0x176>
 800299c:	4615      	mov	r5, r2
 800299e:	e7bd      	b.n	800291c <_printf_i+0x12c>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	6826      	ldr	r6, [r4, #0]
 80029a4:	6961      	ldr	r1, [r4, #20]
 80029a6:	1d18      	adds	r0, r3, #4
 80029a8:	6028      	str	r0, [r5, #0]
 80029aa:	0635      	lsls	r5, r6, #24
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	d501      	bpl.n	80029b4 <_printf_i+0x1c4>
 80029b0:	6019      	str	r1, [r3, #0]
 80029b2:	e002      	b.n	80029ba <_printf_i+0x1ca>
 80029b4:	0670      	lsls	r0, r6, #25
 80029b6:	d5fb      	bpl.n	80029b0 <_printf_i+0x1c0>
 80029b8:	8019      	strh	r1, [r3, #0]
 80029ba:	2300      	movs	r3, #0
 80029bc:	6123      	str	r3, [r4, #16]
 80029be:	4615      	mov	r5, r2
 80029c0:	e7bc      	b.n	800293c <_printf_i+0x14c>
 80029c2:	682b      	ldr	r3, [r5, #0]
 80029c4:	1d1a      	adds	r2, r3, #4
 80029c6:	602a      	str	r2, [r5, #0]
 80029c8:	681d      	ldr	r5, [r3, #0]
 80029ca:	6862      	ldr	r2, [r4, #4]
 80029cc:	2100      	movs	r1, #0
 80029ce:	4628      	mov	r0, r5
 80029d0:	f7fd fc26 	bl	8000220 <memchr>
 80029d4:	b108      	cbz	r0, 80029da <_printf_i+0x1ea>
 80029d6:	1b40      	subs	r0, r0, r5
 80029d8:	6060      	str	r0, [r4, #4]
 80029da:	6863      	ldr	r3, [r4, #4]
 80029dc:	6123      	str	r3, [r4, #16]
 80029de:	2300      	movs	r3, #0
 80029e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e4:	e7aa      	b.n	800293c <_printf_i+0x14c>
 80029e6:	6923      	ldr	r3, [r4, #16]
 80029e8:	462a      	mov	r2, r5
 80029ea:	4649      	mov	r1, r9
 80029ec:	4640      	mov	r0, r8
 80029ee:	47d0      	blx	sl
 80029f0:	3001      	adds	r0, #1
 80029f2:	d0ad      	beq.n	8002950 <_printf_i+0x160>
 80029f4:	6823      	ldr	r3, [r4, #0]
 80029f6:	079b      	lsls	r3, r3, #30
 80029f8:	d413      	bmi.n	8002a22 <_printf_i+0x232>
 80029fa:	68e0      	ldr	r0, [r4, #12]
 80029fc:	9b03      	ldr	r3, [sp, #12]
 80029fe:	4298      	cmp	r0, r3
 8002a00:	bfb8      	it	lt
 8002a02:	4618      	movlt	r0, r3
 8002a04:	e7a6      	b.n	8002954 <_printf_i+0x164>
 8002a06:	2301      	movs	r3, #1
 8002a08:	4632      	mov	r2, r6
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	4640      	mov	r0, r8
 8002a0e:	47d0      	blx	sl
 8002a10:	3001      	adds	r0, #1
 8002a12:	d09d      	beq.n	8002950 <_printf_i+0x160>
 8002a14:	3501      	adds	r5, #1
 8002a16:	68e3      	ldr	r3, [r4, #12]
 8002a18:	9903      	ldr	r1, [sp, #12]
 8002a1a:	1a5b      	subs	r3, r3, r1
 8002a1c:	42ab      	cmp	r3, r5
 8002a1e:	dcf2      	bgt.n	8002a06 <_printf_i+0x216>
 8002a20:	e7eb      	b.n	80029fa <_printf_i+0x20a>
 8002a22:	2500      	movs	r5, #0
 8002a24:	f104 0619 	add.w	r6, r4, #25
 8002a28:	e7f5      	b.n	8002a16 <_printf_i+0x226>
 8002a2a:	bf00      	nop
 8002a2c:	08002b5d 	.word	0x08002b5d
 8002a30:	08002b6e 	.word	0x08002b6e

08002a34 <memmove>:
 8002a34:	4288      	cmp	r0, r1
 8002a36:	b510      	push	{r4, lr}
 8002a38:	eb01 0402 	add.w	r4, r1, r2
 8002a3c:	d902      	bls.n	8002a44 <memmove+0x10>
 8002a3e:	4284      	cmp	r4, r0
 8002a40:	4623      	mov	r3, r4
 8002a42:	d807      	bhi.n	8002a54 <memmove+0x20>
 8002a44:	1e43      	subs	r3, r0, #1
 8002a46:	42a1      	cmp	r1, r4
 8002a48:	d008      	beq.n	8002a5c <memmove+0x28>
 8002a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a52:	e7f8      	b.n	8002a46 <memmove+0x12>
 8002a54:	4402      	add	r2, r0
 8002a56:	4601      	mov	r1, r0
 8002a58:	428a      	cmp	r2, r1
 8002a5a:	d100      	bne.n	8002a5e <memmove+0x2a>
 8002a5c:	bd10      	pop	{r4, pc}
 8002a5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a66:	e7f7      	b.n	8002a58 <memmove+0x24>

08002a68 <_sbrk_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	4d06      	ldr	r5, [pc, #24]	; (8002a84 <_sbrk_r+0x1c>)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4608      	mov	r0, r1
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	f7fd ff6a 	bl	800094c <_sbrk>
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	d102      	bne.n	8002a82 <_sbrk_r+0x1a>
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	b103      	cbz	r3, 8002a82 <_sbrk_r+0x1a>
 8002a80:	6023      	str	r3, [r4, #0]
 8002a82:	bd38      	pop	{r3, r4, r5, pc}
 8002a84:	20000200 	.word	0x20000200

08002a88 <memcpy>:
 8002a88:	440a      	add	r2, r1
 8002a8a:	4291      	cmp	r1, r2
 8002a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a90:	d100      	bne.n	8002a94 <memcpy+0xc>
 8002a92:	4770      	bx	lr
 8002a94:	b510      	push	{r4, lr}
 8002a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a9e:	4291      	cmp	r1, r2
 8002aa0:	d1f9      	bne.n	8002a96 <memcpy+0xe>
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <_realloc_r>:
 8002aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa8:	4680      	mov	r8, r0
 8002aaa:	4614      	mov	r4, r2
 8002aac:	460e      	mov	r6, r1
 8002aae:	b921      	cbnz	r1, 8002aba <_realloc_r+0x16>
 8002ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	f7ff bc49 	b.w	800234c <_malloc_r>
 8002aba:	b92a      	cbnz	r2, 8002ac8 <_realloc_r+0x24>
 8002abc:	f7ff fbda 	bl	8002274 <_free_r>
 8002ac0:	4625      	mov	r5, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ac8:	f000 f81b 	bl	8002b02 <_malloc_usable_size_r>
 8002acc:	4284      	cmp	r4, r0
 8002ace:	4607      	mov	r7, r0
 8002ad0:	d802      	bhi.n	8002ad8 <_realloc_r+0x34>
 8002ad2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ad6:	d812      	bhi.n	8002afe <_realloc_r+0x5a>
 8002ad8:	4621      	mov	r1, r4
 8002ada:	4640      	mov	r0, r8
 8002adc:	f7ff fc36 	bl	800234c <_malloc_r>
 8002ae0:	4605      	mov	r5, r0
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d0ed      	beq.n	8002ac2 <_realloc_r+0x1e>
 8002ae6:	42bc      	cmp	r4, r7
 8002ae8:	4622      	mov	r2, r4
 8002aea:	4631      	mov	r1, r6
 8002aec:	bf28      	it	cs
 8002aee:	463a      	movcs	r2, r7
 8002af0:	f7ff ffca 	bl	8002a88 <memcpy>
 8002af4:	4631      	mov	r1, r6
 8002af6:	4640      	mov	r0, r8
 8002af8:	f7ff fbbc 	bl	8002274 <_free_r>
 8002afc:	e7e1      	b.n	8002ac2 <_realloc_r+0x1e>
 8002afe:	4635      	mov	r5, r6
 8002b00:	e7df      	b.n	8002ac2 <_realloc_r+0x1e>

08002b02 <_malloc_usable_size_r>:
 8002b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b06:	1f18      	subs	r0, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bfbc      	itt	lt
 8002b0c:	580b      	ldrlt	r3, [r1, r0]
 8002b0e:	18c0      	addlt	r0, r0, r3
 8002b10:	4770      	bx	lr
	...

08002b14 <_init>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr

08002b20 <_fini>:
 8002b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b22:	bf00      	nop
 8002b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b26:	bc08      	pop	{r3}
 8002b28:	469e      	mov	lr, r3
 8002b2a:	4770      	bx	lr
