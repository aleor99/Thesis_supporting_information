
sniffer_printVoltage_coninvioarduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800305c  0800305c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800305c  0800305c  0001305c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003064  08003064  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027d8  2000000c  08003078  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027e4  08003078  000227e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088a3  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190f  00000000  00000000  00028922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  0002a238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000597  00000000  00000000  0002a988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001393c  00000000  00000000  0002af1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098ef  00000000  00000000  0003e85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076d3a  00000000  00000000  0004814a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ce0  00000000  00000000  000bee84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c0b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003014 	.word	0x08003014

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003014 	.word	0x08003014

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fc87 	bl	8000e1c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f817 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8d5 	bl	80006c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f8a9 	bl	800066c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800051a:	f000 f87d 	bl	8000618 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 800051e:	2213      	movs	r2, #19
 8000520:	4905      	ldr	r1, [pc, #20]	; (8000538 <main+0x34>)
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x38>)
 8000524:	f001 fdcf 	bl	80020c6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int points = acquire_data();
 8000528:	f000 f9de 	bl	80008e8 <acquire_data>
 800052c:	6078      	str	r0, [r7, #4]
	  display_data(points);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 fa5e 	bl	80009f0 <display_data>
  {
 8000534:	e7f8      	b.n	8000528 <main+0x24>
 8000536:	bf00      	nop
 8000538:	200027c8 	.word	0x200027c8
 800053c:	20000070 	.word	0x20000070

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	; 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 fd34 	bl	8002fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a28      	ldr	r2, [pc, #160]	; (8000610 <SystemClock_Config+0xd0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a22      	ldr	r2, [pc, #136]	; (8000614 <SystemClock_Config+0xd4>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa1c 	bl	8001a08 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 faf7 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 ffe6 	bl	80015c8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 fae1 	bl	8000bc8 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f001 fc5e 	bl	8001f10 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 fab5 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000028 	.word	0x20000028
 8000668:	40011000 	.word	0x40011000

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 250000;
 8000676:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 8000678:	4a10      	ldr	r2, [pc, #64]	; (80006bc <MX_USART2_UART_Init+0x50>)
 800067a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 8000690:	220c      	movs	r2, #12
 8000692:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MX_USART2_UART_Init+0x48>)
 80006a2:	f001 fc35 	bl	8001f10 <HAL_UART_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80006ac:	f000 fa8c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000070 	.word	0x20000070
 80006b8:	40004400 	.word	0x40004400
 80006bc:	0003d090 	.word	0x0003d090

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b3a      	ldr	r3, [pc, #232]	; (80007c4 <MX_GPIO_Init+0x104>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a39      	ldr	r2, [pc, #228]	; (80007c4 <MX_GPIO_Init+0x104>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b37      	ldr	r3, [pc, #220]	; (80007c4 <MX_GPIO_Init+0x104>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <MX_GPIO_Init+0x104>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a32      	ldr	r2, [pc, #200]	; (80007c4 <MX_GPIO_Init+0x104>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b30      	ldr	r3, [pc, #192]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a24      	ldr	r2, [pc, #144]	; (80007c4 <MX_GPIO_Init+0x104>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0x104>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	481f      	ldr	r0, [pc, #124]	; (80007c8 <MX_GPIO_Init+0x108>)
 800074c:	f000 ff08 	bl	8001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_GPIO_Init+0x10c>)
 8000768:	f000 fd6e 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800076c:	2320      	movs	r3, #32
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4811      	ldr	r0, [pc, #68]	; (80007c8 <MX_GPIO_Init+0x108>)
 8000784:	f000 fd60 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCL_PIN_Pin */
  GPIO_InitStruct.Pin = SCL_PIN_Pin;
 8000788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_PIN_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x110>)
 800079e:	f000 fd53 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_PIN_Pin */
  GPIO_InitStruct.Pin = SDA_PIN_Pin;
 80007a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDA_PIN_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_GPIO_Init+0x108>)
 80007b8:	f000 fd46 	bl	8001248 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000
 80007cc:	40020800 	.word	0x40020800
 80007d0:	40020400 	.word	0x40020400

080007d4 <printHexByte>:
/* USER CODE BEGIN 4 */

////////////////////////
void printHexByte(uint8_t b) //-------------------> funziona
////////////////////////
{
 80007d4:	b5b0      	push	{r4, r5, r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  char hexChars[] = "0123456789ABCDEF";
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <printHexByte+0x68>)
 80007e0:	f107 040c 	add.w	r4, r7, #12
 80007e4:	461d      	mov	r5, r3
 80007e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ea:	682b      	ldr	r3, [r5, #0]
 80007ec:	7023      	strb	r3, [r4, #0]

  // Calcola i valori hex dei nibble
  char highNibble = hexChars[(b >> 4) & 0x0F];
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	091b      	lsrs	r3, r3, #4
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	3320      	adds	r3, #32
 80007fa:	443b      	add	r3, r7
 80007fc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000800:	72fb      	strb	r3, [r7, #11]
  char lowNibble = hexChars[b & 0x0F];
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	f003 030f 	and.w	r3, r3, #15
 8000808:	3320      	adds	r3, #32
 800080a:	443b      	add	r3, r7
 800080c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000810:	72bb      	strb	r3, [r7, #10]
  // Invia i caratteri sulla seriale
  HAL_UART_Transmit(&huart2, (uint8_t *)&highNibble, 1, HAL_MAX_DELAY);
 8000812:	f107 010b 	add.w	r1, r7, #11
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
 800081a:	2201      	movs	r2, #1
 800081c:	4808      	ldr	r0, [pc, #32]	; (8000840 <printHexByte+0x6c>)
 800081e:	f001 fbc7 	bl	8001fb0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)&lowNibble, 1, HAL_MAX_DELAY);
 8000822:	f107 010a 	add.w	r1, r7, #10
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	2201      	movs	r2, #1
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <printHexByte+0x6c>)
 800082e:	f001 fbbf 	bl	8001fb0 <HAL_UART_Transmit>
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bdb0      	pop	{r4, r5, r7, pc}
 800083a:	bf00      	nop
 800083c:	0800302c 	.word	0x0800302c
 8000840:	20000070 	.word	0x20000070

08000844 <printabytes>:


////////////////////////
void printabytes(int* bytes)//-----------------------> non l'ho provata ma penso che funzioni
///////////////////////
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  for(int i=3; i<6; i++)
 800084c:	2303      	movs	r3, #3
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00e      	b.n	8000870 <printabytes+0x2c>
  {
    printHexByte(bytes[i] / 2);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	0fda      	lsrs	r2, r3, #31
 800085e:	4413      	add	r3, r2
 8000860:	105b      	asrs	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ffb5 	bl	80007d4 <printHexByte>
  for(int i=3; i<6; i++)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b05      	cmp	r3, #5
 8000874:	dded      	ble.n	8000852 <printabytes+0xe>
  }
}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <gbuffer>:


//////////////////
int gbuffer(int i)//---------------------------> sembra funzionare, attento al tipo ecc
//////////////////
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    return (buffer[i] >> 6) & 0x3;
 8000888:	4a06      	ldr	r2, [pc, #24]	; (80008a4 <gbuffer+0x24>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	099b      	lsrs	r3, r3, #6
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0303 	and.w	r3, r3, #3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	200000b8 	.word	0x200000b8

080008a8 <findNextStartCondition>:

/////////////////////////////////
int findNextStartCondition(int k)//-------------------------> non dovrebbe avere niente di strano
/////////////////////////////////
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  while((k < BUFFSIZE- 1) && ((gbuffer(k - 1) != 3) || (gbuffer(k) != 1)))
 80008b0:	e002      	b.n	80008b8 <findNextStartCondition+0x10>
    k++;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3301      	adds	r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
  while((k < BUFFSIZE- 1) && ((gbuffer(k - 1) != 3) || (gbuffer(k) != 1)))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f242 720e 	movw	r2, #9998	; 0x270e
 80008be:	4293      	cmp	r3, r2
 80008c0:	dc0d      	bgt.n	80008de <findNextStartCondition+0x36>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffda 	bl	8000880 <gbuffer>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b03      	cmp	r3, #3
 80008d0:	d1ef      	bne.n	80008b2 <findNextStartCondition+0xa>
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffd4 	bl	8000880 <gbuffer>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d1e9      	bne.n	80008b2 <findNextStartCondition+0xa>
    // Serial.print("Next start condition: "); Serial.println(k);
  return k;
 80008de:	687b      	ldr	r3, [r7, #4]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <acquire_data>:

//////////////////
int acquire_data()//------------------------------------> CONTROLLARE SE FUNZIONA, LE FUNZIONI dovrei averle messe
//////////////////
// Pins are hard coded for speed reason
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  unsigned long endtime;
  unsigned int data,lastData;

  // wait until start condition is fullfilled
  bool start = false;
 80008ee:	2300      	movs	r3, #0
 80008f0:	74fb      	strb	r3, [r7, #19]
  while (!start)
 80008f2:	e016      	b.n	8000922 <acquire_data+0x3a>
  {
    while ((lastData = sample()) != START1);          // wait until state is START1
 80008f4:	bf00      	nop
 80008f6:	f000 f85f 	bl	80009b8 <sample>
 80008fa:	4603      	mov	r3, r0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	2bc0      	cmp	r3, #192	; 0xc0
 8000902:	d1f8      	bne.n	80008f6 <acquire_data+0xe>
    while ((data = sample()) == lastData);            // wait until state change, cambia il valore dopo lo start, aspetto che non sia piu il messaggio di start
 8000904:	bf00      	nop
 8000906:	f000 f857 	bl	80009b8 <sample>
 800090a:	4603      	mov	r3, r0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	429a      	cmp	r2, r3
 8000914:	d0f7      	beq.n	8000906 <acquire_data+0x1e>
    start = (data == START2);                       // start condtion met if new state is START2
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b40      	cmp	r3, #64	; 0x40
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	74fb      	strb	r3, [r7, #19]
  while (!start)
 8000922:	7cfb      	ldrb	r3, [r7, #19]
 8000924:	f083 0301 	eor.w	r3, r3, #1
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1e2      	bne.n	80008f4 <acquire_data+0xc>
    //quando il messaggio finisce
  }

//C'e un controllo sul valore dei pinD selezionati per sda e scl, una volta che lo stop (scl e sda alti) allora il messaggio dovrebbe essere finito in teoria
  endtime = millis() + TIMEOUT; //istante in cui viene chiamata piu timeout
 800092e:	f000 f837 	bl	80009a0 <millis>
 8000932:	4603      	mov	r3, r0
 8000934:	3332      	adds	r3, #50	; 0x32
 8000936:	60bb      	str	r3, [r7, #8]
  lastData = START2;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	617b      	str	r3, [r7, #20]
  int k = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  buffer[k++] = START1;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60fa      	str	r2, [r7, #12]
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <acquire_data+0xb4>)
 8000948:	21c0      	movs	r1, #192	; 0xc0
 800094a:	54d1      	strb	r1, [r2, r3]
  buffer[k++] = START2;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	60fa      	str	r2, [r7, #12]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <acquire_data+0xb4>)
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	54d1      	strb	r1, [r2, r3]
  do {
    while ((data = sample()) == lastData);           // wait until data has changed
 8000958:	bf00      	nop
 800095a:	f000 f82d 	bl	80009b8 <sample>
 800095e:	4603      	mov	r3, r0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	429a      	cmp	r2, r3
 8000968:	d0f7      	beq.n	800095a <acquire_data+0x72>
    // a me interessano solo quei due bit, quindi me li saldo in un buffer. Questo buffer avra valori ad 8 bit che poi modifiati ci daranno il dato in decimale o esa
    buffer[k++] = lastData = data;    //in teroia sono solo i due bit pero
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	60fa      	str	r2, [r7, #12]
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	b2d1      	uxtb	r1, r2
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <acquire_data+0xb4>)
 800097a:	54d1      	strb	r1, [r2, r3]
  }
  //quindi alla fine della funzione avro un be=uffer di 1000 con tutti i valori, presumibilmente i valori saranno tipo 1000/10 penso
  while ((k < BUFFSIZE) && (millis() < endtime));
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000982:	4293      	cmp	r3, r2
 8000984:	dc05      	bgt.n	8000992 <acquire_data+0xaa>
 8000986:	f000 f80b 	bl	80009a0 <millis>
 800098a:	4602      	mov	r2, r0
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4293      	cmp	r3, r2
 8000990:	d8e2      	bhi.n	8000958 <acquire_data+0x70>
  return k;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200000b8 	.word	0x200000b8

080009a0 <millis>:

//////////////////
uint32_t millis()
/////////////////
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return counter;
 80009a4:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <millis+0x14>)
 80009a6:	681b      	ldr	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	200027dc 	.word	0x200027dc

080009b8 <sample>:


////////////////////////
uint8_t sample(void)//------------------> si potrebbe anche provare separatamente ma penso che in linea di massima vada bene
///////////////////////
{
 80009b8:	b598      	push	{r3, r4, r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(GPIOA, SDA_PIN_Pin)<<7)|(HAL_GPIO_ReadPin(GPIOB, SCL_PIN_Pin)<<6));
 80009bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <sample+0x30>)
 80009c2:	f000 fdb5 	bl	8001530 <HAL_GPIO_ReadPin>
 80009c6:	4603      	mov	r3, r0
 80009c8:	01db      	lsls	r3, r3, #7
 80009ca:	b25c      	sxtb	r4, r3
 80009cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d0:	4806      	ldr	r0, [pc, #24]	; (80009ec <sample+0x34>)
 80009d2:	f000 fdad 	bl	8001530 <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	b25b      	sxtb	r3, r3
 80009dc:	4323      	orrs	r3, r4
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	b2db      	uxtb	r3, r3
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	bd98      	pop	{r3, r4, r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400

080009f0 <display_data>:


/////////////////////////////
void display_data(int points) // quindi in ingresso ho il buffer con i valori del sample
/////////////////////////////
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b0a8      	sub	sp, #160	; 0xa0
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  int  data, k, Bit, Byte, i, state,nextStart;
  int bytes[10];
  char flag_OK=OFF;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  int count=0, count_it=0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  #define FIRST    1
  #define AST      2
  #define DATA     3
  #define AD7746            48
  #define FIRST_VAL         0x0E
  starttime = millis();
 8000a0a:	f7ff ffc9 	bl	80009a0 <millis>
 8000a0e:	67f8      	str	r0, [r7, #124]	; 0x7c

  k = 3;              // ignore start transition, nei primi tre ha niente, start1 e start2
 8000a10:	2303      	movs	r3, #3
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  i = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  Byte = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  state = ADDRESS;
 8000a22:	2300      	movs	r3, #0
 8000a24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  nextStart = findNextStartCondition(k); //cerca se sono arrivato allo stop e restituisce dove sono arrivato
 8000a28:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000a2c:	f7ff ff3c 	bl	80008a8 <findNextStartCondition>
 8000a30:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  do { //finche non ha printato tutti i punti
    data = gbuffer(k++);//ha sample alla fine
 8000a34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a38:	1c5a      	adds	r2, r3, #1
 8000a3a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff1e 	bl	8000880 <gbuffer>
 8000a44:	67b8      	str	r0, [r7, #120]	; 0x78
    if (data & 1)
 8000a46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	f000 808b 	beq.w	8000b68 <display_data+0x178>
    { //penso se scl e 1, il valore e aggiornato col fronte alto di clock
      Bit = (data & 2) > 0; //il bit sara 1 o 0 a seconda che sda sia 1 o 0
 8000a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bfcc      	ite	gt
 8000a5c:	2301      	movgt	r3, #1
 8000a5e:	2300      	movle	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	677b      	str	r3, [r7, #116]	; 0x74
      Byte = (Byte << 1) + Bit;  //aggiunge il bit al byte che verra poi messo nel buffer
 8000a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      if(i++>=8)
 8000a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	dd73      	ble.n	8000b68 <display_data+0x178>
      {
    	  switch(state)
 8000a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <display_data+0xa2>
 8000a88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d006      	beq.n	8000a9e <display_data+0xae>
 8000a90:	e01d      	b.n	8000ace <display_data+0xde>
    	  {
    	  	  case ADDRESS:
    	  		  state++;
 8000a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a96:	3301      	adds	r3, #1
 8000a98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    	  		  break;
 8000a9c:	e043      	b.n	8000b26 <display_data+0x136>
    	  	  case FIRST:
    	  		  if(Byte/2==0x01)
 8000a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d809      	bhi.n	8000abc <display_data+0xcc>
    	  		  {
    	  			flag_OK=ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    	  			HAL_UART_Transmit(&huart2, "\n", strlen("\n"), 50);
 8000aae:	2332      	movs	r3, #50	; 0x32
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4933      	ldr	r1, [pc, #204]	; (8000b80 <display_data+0x190>)
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <display_data+0x194>)
 8000ab6:	f001 fa7b 	bl	8001fb0 <HAL_UART_Transmit>
 8000aba:	e002      	b.n	8000ac2 <display_data+0xd2>
    	  		  }
    	  		  else
    	  			flag_OK=OFF;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    	  		  state++;
 8000ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    	  		  break;
 8000acc:	e02b      	b.n	8000b26 <display_data+0x136>
    	  	  default:
				if (flag_OK && count<5)
 8000ace:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d011      	beq.n	8000afa <display_data+0x10a>
 8000ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	dc0d      	bgt.n	8000afa <display_data+0x10a>
				{
				  bytes[count_it]=Byte;
 8000ade:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	33a0      	adds	r3, #160	; 0xa0
 8000ae6:	443b      	add	r3, r7
 8000ae8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000aec:	f843 2c54 	str.w	r2, [r3, #-84]
				  count_it++;
 8000af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000af4:	3301      	adds	r3, #1
 8000af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}
				if (count==5 && flag_OK)
 8000afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000afe:	2b05      	cmp	r3, #5
 8000b00:	d10b      	bne.n	8000b1a <display_data+0x12a>
 8000b02:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <display_data+0x12a>
				{
				  //j++;
				  printabytes(bytes); //vengono printati solo i valori con tre byte così
 8000b0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe98 	bl	8000844 <printabytes>
				  //HAL_UART_Transmit(&huart2,"-->", strlen("-->"), 50);
				  //snprintf(string,sizeof(string) ,"%d", j);
				  //HAL_UART_Transmit(&huart2,string, strlen(string), 50);
				  count_it=0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				}
				count++;
 8000b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				break;
 8000b24:	bf00      	nop
    	  }
		  if (nextStart - k < 9)
 8000b26:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000b2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b08      	cmp	r3, #8
 8000b32:	dc13      	bgt.n	8000b5c <display_data+0x16c>
		  {
			k = nextStart + 1;
 8000b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b38:	3301      	adds	r3, #1
 8000b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			nextStart = findNextStartCondition(k);
 8000b3e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000b42:	f7ff feb1 	bl	80008a8 <findNextStartCondition>
 8000b46:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			state = ADDRESS;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			flag_OK=OFF;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			count=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		   }
          i = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
          Byte = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
       }
    }
  }
  while (k < points);
 8000b68:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	f6ff af60 	blt.w	8000a34 <display_data+0x44>
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	37a0      	adds	r7, #160	; 0xa0
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	08003040 	.word	0x08003040
 8000b84:	20000070 	.word	0x20000070

08000b88 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000b90:	2120      	movs	r1, #32
 8000b92:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_UART_RxCpltCallback+0x30>)
 8000b94:	f000 fcfd 	bl	8001592 <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer), 1000);
 8000b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9c:	2213      	movs	r2, #19
 8000b9e:	4907      	ldr	r1, [pc, #28]	; (8000bbc <HAL_UART_RxCpltCallback+0x34>)
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <HAL_UART_RxCpltCallback+0x38>)
 8000ba2:	f001 fa05 	bl	8001fb0 <HAL_UART_Transmit>
    //HAL_UART_Transmit(&huart2, UART1_rxBuffer, sizeof(UART1_rxBuffer), 1000);
    HAL_UART_Receive_IT(&huart2, UART1_rxBuffer, sizeof(UART1_rxBuffer));
 8000ba6:	2213      	movs	r2, #19
 8000ba8:	4904      	ldr	r1, [pc, #16]	; (8000bbc <HAL_UART_RxCpltCallback+0x34>)
 8000baa:	4806      	ldr	r0, [pc, #24]	; (8000bc4 <HAL_UART_RxCpltCallback+0x3c>)
 8000bac:	f001 fa8b 	bl	80020c6 <HAL_UART_Receive_IT>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40020000 	.word	0x40020000
 8000bbc:	200027c8 	.word	0x200027c8
 8000bc0:	20000028 	.word	0x20000028
 8000bc4:	20000070 	.word	0x20000070

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c12:	2007      	movs	r0, #7
 8000c14:	f000 fa44 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	; 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a36      	ldr	r2, [pc, #216]	; (8000d1c <HAL_UART_MspInit+0xf8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12d      	bne.n	8000ca2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b35      	ldr	r3, [pc, #212]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a34      	ldr	r2, [pc, #208]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c50:	f043 0310 	orr.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
 8000c56:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a2d      	ldr	r2, [pc, #180]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c7e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c90:	2307      	movs	r3, #7
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4822      	ldr	r0, [pc, #136]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000c9c:	f000 fad4 	bl	8001248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ca0:	e038      	b.n	8000d14 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a20      	ldr	r2, [pc, #128]	; (8000d28 <HAL_UART_MspInit+0x104>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d133      	bne.n	8000d14 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0xfc>)
 8000cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4809      	ldr	r0, [pc, #36]	; (8000d24 <HAL_UART_MspInit+0x100>)
 8000d00:	f000 faa2 	bl	8001248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	2100      	movs	r1, #0
 8000d08:	2026      	movs	r0, #38	; 0x26
 8000d0a:	f000 f9d4 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d0e:	2026      	movs	r0, #38	; 0x26
 8000d10:	f000 f9ed 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 8000d14:	bf00      	nop
 8000d16:	3730      	adds	r7, #48	; 0x30
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40004400 	.word	0x40004400

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	counter++;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Handler+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <SysTick_Handler+0x18>)
 8000d80:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f000 f89d 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200027dc 	.word	0x200027dc

08000d90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d94:	4802      	ldr	r0, [pc, #8]	; (8000da0 <USART2_IRQHandler+0x10>)
 8000d96:	f001 f9bb 	bl	8002110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000070 	.word	0x20000070

08000da4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <SystemInit+0x20>)
 8000daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <SystemInit+0x20>)
 8000db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dcc:	f7ff ffea 	bl	8000da4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dd2:	490d      	ldr	r1, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000de8:	4c0a      	ldr	r4, [pc, #40]	; (8000e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df6:	f002 f8e9 	bl	8002fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfa:	f7ff fb83 	bl	8000504 <main>
  bx  lr    
 8000dfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e0c:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 8000e10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e14:	200027e4 	.word	0x200027e4

08000e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e18:	e7fe      	b.n	8000e18 <ADC_IRQHandler>
	...

08000e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <HAL_Init+0x40>)
 8000e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <HAL_Init+0x40>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <HAL_Init+0x40>)
 8000e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f92b 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fec0 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40023c00 	.word	0x40023c00

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f943 	bl	800110a <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f90b 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	; (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	200027e0 	.word	0x200027e0

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200027e0 	.word	0x200027e0

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff8e 	bl	8000fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff29 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff3e 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff8e 	bl	8000ff4 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5d 	bl	8000fa0 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff31 	bl	8000f64 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001130:	f7ff feda 	bl	8000ee8 <HAL_GetTick>
 8001134:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e052      	b.n	80011fa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0216 	bic.w	r2, r2, #22
 8001162:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001172:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2b00      	cmp	r3, #0
 800117a:	d103      	bne.n	8001184 <HAL_DMA_Abort+0x62>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0208 	bic.w	r2, r2, #8
 8001192:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a4:	e013      	b.n	80011ce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011a6:	f7ff fe9f 	bl	8000ee8 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b05      	cmp	r3, #5
 80011b2:	d90c      	bls.n	80011ce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2220      	movs	r2, #32
 80011b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e015      	b.n	80011fa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e4      	bne.n	80011a6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d004      	beq.n	8001220 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00c      	b.n	800123a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2205      	movs	r2, #5
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e14d      	b.n	8001500 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 813c 	bne.w	80014fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8096 	beq.w	80014fa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a50      	ldr	r2, [pc, #320]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x2d0>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_GPIO_Init+0x2d4>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a43      	ldr	r2, [pc, #268]	; (8001520 <HAL_GPIO_Init+0x2d8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00d      	beq.n	8001432 <HAL_GPIO_Init+0x1ea>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a42      	ldr	r2, [pc, #264]	; (8001524 <HAL_GPIO_Init+0x2dc>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d007      	beq.n	800142e <HAL_GPIO_Init+0x1e6>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a41      	ldr	r2, [pc, #260]	; (8001528 <HAL_GPIO_Init+0x2e0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d101      	bne.n	800142a <HAL_GPIO_Init+0x1e2>
 8001426:	2302      	movs	r3, #2
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1ec>
 800142a:	2307      	movs	r3, #7
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1ec>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1ec>
 8001432:	2300      	movs	r3, #0
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	f002 0203 	and.w	r2, r2, #3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x2d4>)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_GPIO_Init+0x2e4>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	43db      	mvns	r3, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4013      	ands	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <HAL_GPIO_Init+0x2e4>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_GPIO_Init+0x2e4>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_GPIO_Init+0x2e4>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_GPIO_Init+0x2e4>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ca:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_GPIO_Init+0x2e4>)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_GPIO_Init+0x2e4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <HAL_GPIO_Init+0x2e4>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	f67f aeae 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3724      	adds	r7, #36	; 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40013800 	.word	0x40013800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
 800156c:	4613      	mov	r3, r2
 800156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001570:	787b      	ldrb	r3, [r7, #1]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d003      	beq.n	800157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800157c:	e003      	b.n	8001586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	041a      	lsls	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	619a      	str	r2, [r3, #24]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001592:	b480      	push	{r7}
 8001594:	b085      	sub	sp, #20
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	041a      	lsls	r2, r3, #16
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	400b      	ands	r3, r1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e0cc      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d90c      	bls.n	8001604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800163e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	4313      	orrs	r3, r2
 8001650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d044      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d003      	beq.n	8001686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001682:	2b03      	cmp	r3, #3
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d109      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e06f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e067      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a6:	4b37      	ldr	r3, [pc, #220]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f023 0203 	bic.w	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4934      	ldr	r1, [pc, #208]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fc16 	bl	8000ee8 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016c0:	f7ff fc12 	bl	8000ee8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e04f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 020c 	and.w	r2, r3, #12
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d1eb      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d20c      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_ClockConfig+0x1b8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fb76 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00
 8001784:	40023800 	.word	0x40023800
 8001788:	08003044 	.word	0x08003044
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001798:	b094      	sub	sp, #80	; 0x50
 800179a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	647b      	str	r3, [r7, #68]	; 0x44
 80017a0:	2300      	movs	r3, #0
 80017a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017a4:	2300      	movs	r3, #0
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ac:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d00d      	beq.n	80017d4 <HAL_RCC_GetSysClockFreq+0x40>
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	f200 80e1 	bhi.w	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x34>
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0x3a>
 80017c6:	e0db      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017c8:	4b73      	ldr	r3, [pc, #460]	; (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017cc:	e0db      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ce:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_RCC_GetSysClockFreq+0x208>)
 80017d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017d2:	e0d8      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d4:	4b6f      	ldr	r3, [pc, #444]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017de:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d063      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017ea:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	099b      	lsrs	r3, r3, #6
 80017f0:	2200      	movs	r2, #0
 80017f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80017f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
 80017fe:	2300      	movs	r3, #0
 8001800:	637b      	str	r3, [r7, #52]	; 0x34
 8001802:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001806:	4622      	mov	r2, r4
 8001808:	462b      	mov	r3, r5
 800180a:	f04f 0000 	mov.w	r0, #0
 800180e:	f04f 0100 	mov.w	r1, #0
 8001812:	0159      	lsls	r1, r3, #5
 8001814:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001818:	0150      	lsls	r0, r2, #5
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4621      	mov	r1, r4
 8001820:	1a51      	subs	r1, r2, r1
 8001822:	6139      	str	r1, [r7, #16]
 8001824:	4629      	mov	r1, r5
 8001826:	eb63 0301 	sbc.w	r3, r3, r1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001838:	4659      	mov	r1, fp
 800183a:	018b      	lsls	r3, r1, #6
 800183c:	4651      	mov	r1, sl
 800183e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001842:	4651      	mov	r1, sl
 8001844:	018a      	lsls	r2, r1, #6
 8001846:	4651      	mov	r1, sl
 8001848:	ebb2 0801 	subs.w	r8, r2, r1
 800184c:	4659      	mov	r1, fp
 800184e:	eb63 0901 	sbc.w	r9, r3, r1
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	f04f 0300 	mov.w	r3, #0
 800185a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800185e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001866:	4690      	mov	r8, r2
 8001868:	4699      	mov	r9, r3
 800186a:	4623      	mov	r3, r4
 800186c:	eb18 0303 	adds.w	r3, r8, r3
 8001870:	60bb      	str	r3, [r7, #8]
 8001872:	462b      	mov	r3, r5
 8001874:	eb49 0303 	adc.w	r3, r9, r3
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001886:	4629      	mov	r1, r5
 8001888:	024b      	lsls	r3, r1, #9
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001890:	4621      	mov	r1, r4
 8001892:	024a      	lsls	r2, r1, #9
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800189a:	2200      	movs	r2, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
 800189e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018a4:	f7fe fcb0 	bl	8000208 <__aeabi_uldivmod>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4613      	mov	r3, r2
 80018ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018b0:	e058      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b2:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	099b      	lsrs	r3, r3, #6
 80018b8:	2200      	movs	r2, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	4611      	mov	r1, r2
 80018be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
 80018c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018cc:	4642      	mov	r2, r8
 80018ce:	464b      	mov	r3, r9
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0159      	lsls	r1, r3, #5
 80018da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018de:	0150      	lsls	r0, r2, #5
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80018ea:	4649      	mov	r1, r9
 80018ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001900:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001904:	ebb2 040a 	subs.w	r4, r2, sl
 8001908:	eb63 050b 	sbc.w	r5, r3, fp
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	00eb      	lsls	r3, r5, #3
 8001916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800191a:	00e2      	lsls	r2, r4, #3
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	4643      	mov	r3, r8
 8001922:	18e3      	adds	r3, r4, r3
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	464b      	mov	r3, r9
 8001928:	eb45 0303 	adc.w	r3, r5, r3
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4500 	ldrd	r4, r5, [r7]
 800193a:	4629      	mov	r1, r5
 800193c:	028b      	lsls	r3, r1, #10
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001944:	4621      	mov	r1, r4
 8001946:	028a      	lsls	r2, r1, #10
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194e:	2200      	movs	r2, #0
 8001950:	61bb      	str	r3, [r7, #24]
 8001952:	61fa      	str	r2, [r7, #28]
 8001954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001958:	f7fe fc56 	bl	8000208 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetSysClockFreq+0x200>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	3301      	adds	r3, #1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001978:	fbb2 f3f3 	udiv	r3, r2, r3
 800197c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800197e:	e002      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0x204>)
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001984:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001988:	4618      	mov	r0, r3
 800198a:	3750      	adds	r7, #80	; 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	007a1200 	.word	0x007a1200

080019a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000000 	.word	0x20000000

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003054 	.word	0x08003054

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffdc 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08003054 	.word	0x08003054

08001a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e273      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d075      	beq.n	8001b12 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a26:	4b88      	ldr	r3, [pc, #544]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b85      	ldr	r3, [pc, #532]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d112      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a3e:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4a:	d10b      	bne.n	8001a64 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	4b7e      	ldr	r3, [pc, #504]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d05b      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d157      	bne.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e24e      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x74>
 8001a6e:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e01d      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	d10c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x98>
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a6c      	ldr	r2, [pc, #432]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	e00b      	b.n	8001ab8 <HAL_RCC_OscConfig+0xb0>
 8001aa0:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d013      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa12 	bl	8000ee8 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fa0e 	bl	8000ee8 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e213      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001ae6:	e014      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f9fe 	bl	8000ee8 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7ff f9fa 	bl	8000ee8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1ff      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d11c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d116      	bne.n	8001b70 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b42:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e1d3      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4937      	ldr	r1, [pc, #220]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	e03a      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b78:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7e:	f7ff f9b3 	bl	8000ee8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b84:	e008      	b.n	8001b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b86:	f7ff f9af 	bl	8000ee8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e1b4      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f0      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4925      	ldr	r1, [pc, #148]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
 8001bb8:	e015      	b.n	8001be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x244>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f992 	bl	8000ee8 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc8:	f7ff f98e 	bl	8000ee8 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e193      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d036      	beq.n	8001c60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d016      	beq.n	8001c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff f972 	bl	8000ee8 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff f96e 	bl	8000ee8 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e173      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x200>
 8001c26:	e01b      	b.n	8001c60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_RCC_OscConfig+0x248>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f95b 	bl	8000ee8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	e00e      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c36:	f7ff f957 	bl	8000ee8 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d907      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e15c      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	42470000 	.word	0x42470000
 8001c50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	4b8a      	ldr	r3, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ea      	bne.n	8001c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 8097 	beq.w	8001d9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c72:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x47c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x47c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a75      	ldr	r2, [pc, #468]	; (8001e84 <HAL_RCC_OscConfig+0x47c>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f917 	bl	8000ee8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff f913 	bl	8000ee8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e118      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b6c      	ldr	r3, [pc, #432]	; (8001e84 <HAL_RCC_OscConfig+0x47c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
 8001ce4:	4b66      	ldr	r3, [pc, #408]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a65      	ldr	r2, [pc, #404]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	e01c      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x30c>
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a60      	ldr	r2, [pc, #384]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d00:	f043 0304 	orr.w	r3, r3, #4
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a5d      	ldr	r2, [pc, #372]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x324>
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a59      	ldr	r2, [pc, #356]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d1a:	f023 0301 	bic.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d26:	f023 0304 	bic.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d015      	beq.n	8001d60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f8d8 	bl	8000ee8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f8d4 	bl	8000ee8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e0d7      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0ee      	beq.n	8001d3c <HAL_RCC_OscConfig+0x334>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f8c2 	bl	8000ee8 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d66:	e00a      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d68:	f7ff f8be 	bl	8000ee8 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e0c1      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ee      	bne.n	8001d68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a3a      	ldr	r2, [pc, #232]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ad 	beq.w	8001f00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d145      	bne.n	8001e46 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <HAL_RCC_OscConfig+0x480>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f892 	bl	8000ee8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f88e 	bl	8000ee8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e093      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dda:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	019b      	lsls	r3, r3, #6
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	061b      	lsls	r3, r3, #24
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	071b      	lsls	r3, r3, #28
 8001e12:	491b      	ldr	r1, [pc, #108]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x480>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f863 	bl	8000ee8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f85f 	bl	8000ee8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e064      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x41e>
 8001e44:	e05c      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_OscConfig+0x480>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f84c 	bl	8000ee8 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff f848 	bl	8000ee8 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04d      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x478>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x44c>
 8001e72:	e045      	b.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e040      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40007000 	.word	0x40007000
 8001e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x504>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d030      	beq.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d129      	bne.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d122      	bne.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d119      	bne.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10f      	bne.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800

08001f10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e042      	b.n	8001fa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fe74 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 fdbd 	bl	8002ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2220      	movs	r2, #32
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b20      	cmp	r3, #32
 8001fce:	d175      	bne.n	80020bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <HAL_UART_Transmit+0x2c>
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e06e      	b.n	80020be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2221      	movs	r2, #33	; 0x21
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fee:	f7fe ff7b 	bl	8000ee8 <HAL_GetTick>
 8001ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002008:	d108      	bne.n	800201c <HAL_UART_Transmit+0x6c>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d104      	bne.n	800201c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e003      	b.n	8002024 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002024:	e02e      	b.n	8002084 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fb1f 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03a      	b.n	80020be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10b      	bne.n	8002066 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800205c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	3302      	adds	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	e007      	b.n	8002076 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	3301      	adds	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1cb      	bne.n	8002026 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 faeb 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2220      	movs	r2, #32
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e006      	b.n	80020be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e000      	b.n	80020be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020bc:	2302      	movs	r3, #2
  }
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b084      	sub	sp, #16
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d112      	bne.n	8002106 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_UART_Receive_IT+0x26>
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00b      	b.n	8002108 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fb12 	bl	8002726 <UART_Start_Receive_IT>
 8002102:	4603      	mov	r3, r0
 8002104:	e000      	b.n	8002108 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0ba      	sub	sp, #232	; 0xe8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800214e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10f      	bne.n	8002176 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_UART_IRQHandler+0x66>
 8002162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fbf2 	bl	8002958 <UART_Receive_IT>
      return;
 8002174:	e25b      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80de 	beq.w	800233c <HAL_UART_IRQHandler+0x22c>
 8002180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800218c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002190:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80d1 	beq.w	800233c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800219a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00b      	beq.n	80021be <HAL_UART_IRQHandler+0xae>
 80021a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00b      	beq.n	80021e2 <HAL_UART_IRQHandler+0xd2>
 80021ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f043 0202 	orr.w	r2, r3, #2
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_UART_IRQHandler+0xf6>
 80021ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	f043 0204 	orr.w	r2, r3, #4
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d011      	beq.n	8002236 <HAL_UART_IRQHandler+0x126>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d105      	bne.n	800222a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800221e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f043 0208 	orr.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 81f2 	beq.w	8002624 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_UART_IRQHandler+0x14e>
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fb7d 	bl	8002958 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_UART_IRQHandler+0x17a>
 8002282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d04f      	beq.n	800232a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa85 	bl	800279a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d141      	bne.n	8002322 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022ac:	e853 3f00 	ldrex	r3, [r3]
 80022b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3314      	adds	r3, #20
 80022c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80022d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022da:	e841 2300 	strex	r3, r2, [r1]
 80022de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80022e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1d9      	bne.n	800229e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d013      	beq.n	800231a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f6:	4a7e      	ldr	r2, [pc, #504]	; (80024f0 <HAL_UART_IRQHandler+0x3e0>)
 80022f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe ff7f 	bl	8001202 <HAL_DMA_Abort_IT>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d016      	beq.n	8002338 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002318:	e00e      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f994 	bl	8002648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002320:	e00a      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f990 	bl	8002648 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002328:	e006      	b.n	8002338 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f98c 	bl	8002648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002336:	e175      	b.n	8002624 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002338:	bf00      	nop
    return;
 800233a:	e173      	b.n	8002624 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	2b01      	cmp	r3, #1
 8002342:	f040 814f 	bne.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8148 	beq.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002358:	f003 0310 	and.w	r3, r3, #16
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8141 	beq.w	80025e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	f040 80b6 	bne.w	80024f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 8145 	beq.w	8002628 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023a6:	429a      	cmp	r2, r3
 80023a8:	f080 813e 	bcs.w	8002628 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023be:	f000 8088 	beq.w	80024d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80023d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	330c      	adds	r3, #12
 80023ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80023ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023fe:	e841 2300 	strex	r3, r2, [r1]
 8002402:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1d9      	bne.n	80023c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	3314      	adds	r3, #20
 8002414:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002418:	e853 3f00 	ldrex	r3, [r3]
 800241c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800241e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3314      	adds	r3, #20
 800242e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002432:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002436:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002438:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800243a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800243e:	e841 2300 	strex	r3, r2, [r1]
 8002442:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1e1      	bne.n	800240e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3314      	adds	r3, #20
 8002450:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002454:	e853 3f00 	ldrex	r3, [r3]
 8002458:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800245a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800245c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3314      	adds	r3, #20
 800246a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800246e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002470:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002472:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002474:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002476:	e841 2300 	strex	r3, r2, [r1]
 800247a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800247c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e3      	bne.n	800244a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80024b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024bc:	e841 2300 	strex	r3, r2, [r1]
 80024c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1e3      	bne.n	8002490 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe fe28 	bl	8001122 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f8b7 	bl	800265c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ee:	e09b      	b.n	8002628 <HAL_UART_IRQHandler+0x518>
 80024f0:	08002861 	.word	0x08002861
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 808e 	beq.w	800262c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8089 	beq.w	800262c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800252a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800253e:	647a      	str	r2, [r7, #68]	; 0x44
 8002540:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800254c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e3      	bne.n	800251a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3314      	adds	r3, #20
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	e853 3f00 	ldrex	r3, [r3]
 8002560:	623b      	str	r3, [r7, #32]
   return(result);
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002576:	633a      	str	r2, [r7, #48]	; 0x30
 8002578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800257c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257e:	e841 2300 	strex	r3, r2, [r1]
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e3      	bne.n	8002552 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	e853 3f00 	ldrex	r3, [r3]
 80025a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0310 	bic.w	r3, r3, #16
 80025ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	330c      	adds	r3, #12
 80025b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025bc:	61fa      	str	r2, [r7, #28]
 80025be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	69b9      	ldr	r1, [r7, #24]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	617b      	str	r3, [r7, #20]
   return(result);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e3      	bne.n	8002598 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f83d 	bl	800265c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025e2:	e023      	b.n	800262c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <HAL_UART_IRQHandler+0x4f4>
 80025f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f943 	bl	8002888 <UART_Transmit_IT>
    return;
 8002602:	e014      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <HAL_UART_IRQHandler+0x51e>
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f983 	bl	8002928 <UART_EndTransmit_IT>
    return;
 8002622:	e004      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
    return;
 8002624:	bf00      	nop
 8002626:	e002      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
      return;
 8002628:	bf00      	nop
 800262a:	e000      	b.n	800262e <HAL_UART_IRQHandler+0x51e>
      return;
 800262c:	bf00      	nop
  }
}
 800262e:	37e8      	adds	r7, #232	; 0xe8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002684:	e03b      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d037      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fc2b 	bl	8000ee8 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03a      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d023      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d020      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b40      	cmp	r3, #64	; 0x40
 80026c0:	d01d      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d116      	bne.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f857 	bl	800279a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	429a      	cmp	r2, r3
 800271a:	d0b4      	beq.n	8002686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	88fa      	ldrh	r2, [r7, #6]
 8002744:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2222      	movs	r2, #34	; 0x22
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800279a:	b480      	push	{r7}
 800279c:	b095      	sub	sp, #84	; 0x54
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ac:	e853 3f00 	ldrex	r3, [r3]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027c2:	643a      	str	r2, [r7, #64]	; 0x40
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e5      	bne.n	80027a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	e853 3f00 	ldrex	r3, [r3]
 80027e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	3314      	adds	r3, #20
 80027f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e5      	bne.n	80027d6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	2b01      	cmp	r3, #1
 8002810:	d119      	bne.n	8002846 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	e853 3f00 	ldrex	r3, [r3]
 8002820:	60bb      	str	r3, [r7, #8]
   return(result);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f023 0310 	bic.w	r3, r3, #16
 8002828:	647b      	str	r3, [r7, #68]	; 0x44
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	330c      	adds	r3, #12
 8002830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002832:	61ba      	str	r2, [r7, #24]
 8002834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	6979      	ldr	r1, [r7, #20]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	e841 2300 	strex	r3, r2, [r1]
 800283e:	613b      	str	r3, [r7, #16]
   return(result);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1e5      	bne.n	8002812 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002854:	bf00      	nop
 8002856:	3754      	adds	r7, #84	; 0x54
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f7ff fee4 	bl	8002648 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b21      	cmp	r3, #33	; 0x21
 800289a:	d13e      	bne.n	800291a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a4:	d114      	bne.n	80028d0 <UART_Transmit_IT+0x48>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d110      	bne.n	80028d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	1c9a      	adds	r2, r3, #2
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	621a      	str	r2, [r3, #32]
 80028ce:	e008      	b.n	80028e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6211      	str	r1, [r2, #32]
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4619      	mov	r1, r3
 80028f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002904:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002914:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
  }
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fe73 	bl	8002634 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b22      	cmp	r3, #34	; 0x22
 800296a:	f040 80ae 	bne.w	8002aca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002976:	d117      	bne.n	80029a8 <UART_Receive_IT+0x50>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d113      	bne.n	80029a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	b29a      	uxth	r2, r3
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28
 80029a6:	e026      	b.n	80029f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d007      	beq.n	80029cc <UART_Receive_IT+0x74>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <UART_Receive_IT+0x82>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e008      	b.n	80029ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4619      	mov	r1, r3
 8002a04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d15d      	bne.n	8002ac6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 0220 	bic.w	r2, r2, #32
 8002a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d135      	bne.n	8002abc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	613b      	str	r3, [r7, #16]
   return(result);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f023 0310 	bic.w	r3, r3, #16
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	623a      	str	r2, [r7, #32]
 8002a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7a:	69f9      	ldr	r1, [r7, #28]
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	e841 2300 	strex	r3, r2, [r1]
 8002a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1e5      	bne.n	8002a56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d10a      	bne.n	8002aae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fdd1 	bl	800265c <HAL_UARTEx_RxEventCallback>
 8002aba:	e002      	b.n	8002ac2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7fe f863 	bl	8000b88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e002      	b.n	8002acc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3730      	adds	r7, #48	; 0x30
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b0c0      	sub	sp, #256	; 0x100
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af0:	68d9      	ldr	r1, [r3, #12]
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	ea40 0301 	orr.w	r3, r0, r1
 8002afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b2c:	f021 010c 	bic.w	r1, r1, #12
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b4e:	6999      	ldr	r1, [r3, #24]
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	ea40 0301 	orr.w	r3, r0, r1
 8002b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <UART_SetConfig+0x2cc>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d005      	beq.n	8002b74 <UART_SetConfig+0xa0>
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b8d      	ldr	r3, [pc, #564]	; (8002da4 <UART_SetConfig+0x2d0>)
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d104      	bne.n	8002b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b74:	f7fe ff34 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b7c:	e003      	b.n	8002b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7e:	f7fe ff1b 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8002b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b90:	f040 810c 	bne.w	8002dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	462b      	mov	r3, r5
 8002baa:	1891      	adds	r1, r2, r2
 8002bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bae:	415b      	adcs	r3, r3
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	eb12 0801 	adds.w	r8, r2, r1
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	eb43 0901 	adc.w	r9, r3, r1
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd6:	4690      	mov	r8, r2
 8002bd8:	4699      	mov	r9, r3
 8002bda:	4623      	mov	r3, r4
 8002bdc:	eb18 0303 	adds.w	r3, r8, r3
 8002be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002be4:	462b      	mov	r3, r5
 8002be6:	eb49 0303 	adc.w	r3, r9, r3
 8002bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c02:	460b      	mov	r3, r1
 8002c04:	18db      	adds	r3, r3, r3
 8002c06:	653b      	str	r3, [r7, #80]	; 0x50
 8002c08:	4613      	mov	r3, r2
 8002c0a:	eb42 0303 	adc.w	r3, r2, r3
 8002c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002c18:	f7fd faf6 	bl	8000208 <__aeabi_uldivmod>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002c22:	fba3 2302 	umull	r2, r3, r3, r2
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	011c      	lsls	r4, r3, #4
 8002c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c3c:	4642      	mov	r2, r8
 8002c3e:	464b      	mov	r3, r9
 8002c40:	1891      	adds	r1, r2, r2
 8002c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c44:	415b      	adcs	r3, r3
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0b01 	adc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c6c:	4692      	mov	sl, r2
 8002c6e:	469b      	mov	fp, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	eb1a 0303 	adds.w	r3, sl, r3
 8002c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	18db      	adds	r3, r3, r3
 8002c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	eb42 0303 	adc.w	r3, r2, r3
 8002ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002cae:	f7fd faab 	bl	8000208 <__aeabi_uldivmod>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4b3b      	ldr	r3, [pc, #236]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cba:	fba3 2301 	umull	r2, r3, r3, r1
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2264      	movs	r2, #100	; 0x64
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	1acb      	subs	r3, r1, r3
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cce:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cdc:	441c      	add	r4, r3
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	1891      	adds	r1, r2, r2
 8002cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cf8:	415b      	adcs	r3, r3
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d00:	4641      	mov	r1, r8
 8002d02:	1851      	adds	r1, r2, r1
 8002d04:	6339      	str	r1, [r7, #48]	; 0x30
 8002d06:	4649      	mov	r1, r9
 8002d08:	414b      	adcs	r3, r1
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002d18:	4659      	mov	r1, fp
 8002d1a:	00cb      	lsls	r3, r1, #3
 8002d1c:	4651      	mov	r1, sl
 8002d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d22:	4651      	mov	r1, sl
 8002d24:	00ca      	lsls	r2, r1, #3
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4642      	mov	r2, r8
 8002d2e:	189b      	adds	r3, r3, r2
 8002d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d34:	464b      	mov	r3, r9
 8002d36:	460a      	mov	r2, r1
 8002d38:	eb42 0303 	adc.w	r3, r2, r3
 8002d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d54:	460b      	mov	r3, r1
 8002d56:	18db      	adds	r3, r3, r3
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	eb42 0303 	adc.w	r3, r2, r3
 8002d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d6a:	f7fd fa4d 	bl	8000208 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <UART_SetConfig+0x2d4>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 0207 	and.w	r2, r3, #7
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4422      	add	r2, r4
 8002d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d9c:	e106      	b.n	8002fac <UART_SetConfig+0x4d8>
 8002d9e:	bf00      	nop
 8002da0:	40011000 	.word	0x40011000
 8002da4:	40011400 	.word	0x40011400
 8002da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002db0:	2200      	movs	r2, #0
 8002db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002dbe:	4642      	mov	r2, r8
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	1891      	adds	r1, r2, r2
 8002dc4:	6239      	str	r1, [r7, #32]
 8002dc6:	415b      	adcs	r3, r3
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dce:	4641      	mov	r1, r8
 8002dd0:	1854      	adds	r4, r2, r1
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	eb43 0501 	adc.w	r5, r3, r1
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	00eb      	lsls	r3, r5, #3
 8002de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002de6:	00e2      	lsls	r2, r4, #3
 8002de8:	4614      	mov	r4, r2
 8002dea:	461d      	mov	r5, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	18e3      	adds	r3, r4, r3
 8002df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002df4:	464b      	mov	r3, r9
 8002df6:	eb45 0303 	adc.w	r3, r5, r3
 8002dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002e1a:	4629      	mov	r1, r5
 8002e1c:	008b      	lsls	r3, r1, #2
 8002e1e:	4621      	mov	r1, r4
 8002e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e24:	4621      	mov	r1, r4
 8002e26:	008a      	lsls	r2, r1, #2
 8002e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e2c:	f7fd f9ec 	bl	8000208 <__aeabi_uldivmod>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4b60      	ldr	r3, [pc, #384]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002e36:	fba3 2302 	umull	r2, r3, r3, r2
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	011c      	lsls	r4, r3, #4
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	61b9      	str	r1, [r7, #24]
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6139      	str	r1, [r7, #16]
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002eb8:	4649      	mov	r1, r9
 8002eba:	008b      	lsls	r3, r1, #2
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	008a      	lsls	r2, r1, #2
 8002ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eca:	f7fd f99d 	bl	8000208 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4b38      	ldr	r3, [pc, #224]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	1acb      	subs	r3, r1, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a33      	ldr	r2, [pc, #204]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	441c      	add	r4, r3
 8002ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002efa:	2200      	movs	r2, #0
 8002efc:	673b      	str	r3, [r7, #112]	; 0x70
 8002efe:	677a      	str	r2, [r7, #116]	; 0x74
 8002f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	1891      	adds	r1, r2, r2
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	415b      	adcs	r3, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f14:	4641      	mov	r1, r8
 8002f16:	1851      	adds	r1, r2, r1
 8002f18:	6039      	str	r1, [r7, #0]
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	414b      	adcs	r3, r1
 8002f1e:	607b      	str	r3, [r7, #4]
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	00cb      	lsls	r3, r1, #3
 8002f30:	4651      	mov	r1, sl
 8002f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f36:	4651      	mov	r1, sl
 8002f38:	00ca      	lsls	r2, r1, #3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4642      	mov	r2, r8
 8002f42:	189b      	adds	r3, r3, r2
 8002f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f46:	464b      	mov	r3, r9
 8002f48:	460a      	mov	r2, r1
 8002f4a:	eb42 0303 	adc.w	r3, r2, r3
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	663b      	str	r3, [r7, #96]	; 0x60
 8002f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f68:	4649      	mov	r1, r9
 8002f6a:	008b      	lsls	r3, r1, #2
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f72:	4641      	mov	r1, r8
 8002f74:	008a      	lsls	r2, r1, #2
 8002f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f7a:	f7fd f945 	bl	8000208 <__aeabi_uldivmod>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f84:	fba3 1302 	umull	r1, r3, r3, r2
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	2164      	movs	r1, #100	; 0x64
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	3332      	adds	r3, #50	; 0x32
 8002f96:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <UART_SetConfig+0x4e4>)
 8002f98:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9c:	095b      	lsrs	r3, r3, #5
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4422      	add	r2, r4
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb8:	51eb851f 	.word	0x51eb851f

08002fbc <memset>:
 8002fbc:	4402      	add	r2, r0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d100      	bne.n	8002fc6 <memset+0xa>
 8002fc4:	4770      	bx	lr
 8002fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fca:	e7f9      	b.n	8002fc0 <memset+0x4>

08002fcc <__libc_init_array>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	4d0d      	ldr	r5, [pc, #52]	; (8003004 <__libc_init_array+0x38>)
 8002fd0:	4c0d      	ldr	r4, [pc, #52]	; (8003008 <__libc_init_array+0x3c>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	2600      	movs	r6, #0
 8002fd8:	42a6      	cmp	r6, r4
 8002fda:	d109      	bne.n	8002ff0 <__libc_init_array+0x24>
 8002fdc:	4d0b      	ldr	r5, [pc, #44]	; (800300c <__libc_init_array+0x40>)
 8002fde:	4c0c      	ldr	r4, [pc, #48]	; (8003010 <__libc_init_array+0x44>)
 8002fe0:	f000 f818 	bl	8003014 <_init>
 8002fe4:	1b64      	subs	r4, r4, r5
 8002fe6:	10a4      	asrs	r4, r4, #2
 8002fe8:	2600      	movs	r6, #0
 8002fea:	42a6      	cmp	r6, r4
 8002fec:	d105      	bne.n	8002ffa <__libc_init_array+0x2e>
 8002fee:	bd70      	pop	{r4, r5, r6, pc}
 8002ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff4:	4798      	blx	r3
 8002ff6:	3601      	adds	r6, #1
 8002ff8:	e7ee      	b.n	8002fd8 <__libc_init_array+0xc>
 8002ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffe:	4798      	blx	r3
 8003000:	3601      	adds	r6, #1
 8003002:	e7f2      	b.n	8002fea <__libc_init_array+0x1e>
 8003004:	08003064 	.word	0x08003064
 8003008:	08003064 	.word	0x08003064
 800300c:	08003064 	.word	0x08003064
 8003010:	08003068 	.word	0x08003068

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
